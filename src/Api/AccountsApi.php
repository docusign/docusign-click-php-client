<?php
/**
 * AccountsApi
 * PHP version 5
 *
 * @category Class
 * @package  DocuSign\Click
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * DocuSign Click API
 *
 * DocuSign Click lets you capture consent to standard agreement terms with a single click: terms and conditions, terms of service, terms of use, privacy policies, and more. The Click API lets you include this customizable clickwrap solution in your DocuSign integrations.
 *
 * OpenAPI spec version: v1
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.13-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace DocuSign\Click\Api\AccountsApi;

class DeleteClickwrapOptions
{
    /**
      * $versions 
      * @var string
      */
    protected $versions;

    /**
     * Gets versions
     * @return string
     */
    public function getVersions()
    {
        return $this->versions;
    }
  
    /**
     * Sets versions
     * @param string $versions 
     * @return $this
     */
    public function setVersions($versions)
    {
        $this->versions = $versions;
        return $this;
    }
}
class DeleteClickwrapVersionsOptions
{
    /**
      * $clickwrap_version_ids 
      * @var string
      */
    protected $clickwrap_version_ids;

    /**
     * Gets clickwrap_version_ids
     * @return string
     */
    public function getClickwrapVersionIds()
    {
        return $this->clickwrap_version_ids;
    }
  
    /**
     * Sets clickwrap_version_ids
     * @param string $clickwrap_version_ids 
     * @return $this
     */
    public function setClickwrapVersionIds($clickwrap_version_ids)
    {
        $this->clickwrap_version_ids = $clickwrap_version_ids;
        return $this;
    }
}
class DeleteClickwrapsOptions
{
    /**
      * $clickwrap_ids 
      * @var string
      */
    protected $clickwrap_ids;

    /**
     * Gets clickwrap_ids
     * @return string
     */
    public function getClickwrapIds()
    {
        return $this->clickwrap_ids;
    }
  
    /**
     * Sets clickwrap_ids
     * @param string $clickwrap_ids 
     * @return $this
     */
    public function setClickwrapIds($clickwrap_ids)
    {
        $this->clickwrap_ids = $clickwrap_ids;
        return $this;
    }
}
class GetClickwrapAgreementsOptions
{
    /**
      * $client_user_id 
      * @var string
      */
    protected $client_user_id;

    /**
     * Gets client_user_id
     * @return string
     */
    public function getClientUserId()
    {
        return $this->client_user_id;
    }
  
    /**
     * Sets client_user_id
     * @param string $client_user_id 
     * @return $this
     */
    public function setClientUserId($client_user_id)
    {
        $this->client_user_id = $client_user_id;
        return $this;
    }
    /**
      * $from_date 
      * @var string
      */
    protected $from_date;

    /**
     * Gets from_date
     * @return string
     */
    public function getFromDate()
    {
        return $this->from_date;
    }
  
    /**
     * Sets from_date
     * @param string $from_date 
     * @return $this
     */
    public function setFromDate($from_date)
    {
        $this->from_date = $from_date;
        return $this;
    }
    /**
      * $page_number 
      * @var string
      */
    protected $page_number;

    /**
     * Gets page_number
     * @return string
     */
    public function getPageNumber()
    {
        return $this->page_number;
    }
  
    /**
     * Sets page_number
     * @param string $page_number 
     * @return $this
     */
    public function setPageNumber($page_number)
    {
        $this->page_number = $page_number;
        return $this;
    }
    /**
      * $status 
      * @var string
      */
    protected $status;

    /**
     * Gets status
     * @return string
     */
    public function getStatus()
    {
        return $this->status;
    }
  
    /**
     * Sets status
     * @param string $status 
     * @return $this
     */
    public function setStatus($status)
    {
        $this->status = $status;
        return $this;
    }
    /**
      * $to_date 
      * @var string
      */
    protected $to_date;

    /**
     * Gets to_date
     * @return string
     */
    public function getToDate()
    {
        return $this->to_date;
    }
  
    /**
     * Sets to_date
     * @param string $to_date 
     * @return $this
     */
    public function setToDate($to_date)
    {
        $this->to_date = $to_date;
        return $this;
    }
}
class GetClickwrapVersionAgreementsOptions
{
    /**
      * $client_user_id 
      * @var string
      */
    protected $client_user_id;

    /**
     * Gets client_user_id
     * @return string
     */
    public function getClientUserId()
    {
        return $this->client_user_id;
    }
  
    /**
     * Sets client_user_id
     * @param string $client_user_id 
     * @return $this
     */
    public function setClientUserId($client_user_id)
    {
        $this->client_user_id = $client_user_id;
        return $this;
    }
    /**
      * $from_date 
      * @var string
      */
    protected $from_date;

    /**
     * Gets from_date
     * @return string
     */
    public function getFromDate()
    {
        return $this->from_date;
    }
  
    /**
     * Sets from_date
     * @param string $from_date 
     * @return $this
     */
    public function setFromDate($from_date)
    {
        $this->from_date = $from_date;
        return $this;
    }
    /**
      * $page_number 
      * @var string
      */
    protected $page_number;

    /**
     * Gets page_number
     * @return string
     */
    public function getPageNumber()
    {
        return $this->page_number;
    }
  
    /**
     * Sets page_number
     * @param string $page_number 
     * @return $this
     */
    public function setPageNumber($page_number)
    {
        $this->page_number = $page_number;
        return $this;
    }
    /**
      * $status 
      * @var string
      */
    protected $status;

    /**
     * Gets status
     * @return string
     */
    public function getStatus()
    {
        return $this->status;
    }
  
    /**
     * Sets status
     * @param string $status 
     * @return $this
     */
    public function setStatus($status)
    {
        $this->status = $status;
        return $this;
    }
    /**
      * $to_date 
      * @var string
      */
    protected $to_date;

    /**
     * Gets to_date
     * @return string
     */
    public function getToDate()
    {
        return $this->to_date;
    }
  
    /**
     * Sets to_date
     * @param string $to_date 
     * @return $this
     */
    public function setToDate($to_date)
    {
        $this->to_date = $to_date;
        return $this;
    }
}
class GetClickwrapVersionAgreementsByNumberOptions
{
    /**
      * $client_user_id 
      * @var string
      */
    protected $client_user_id;

    /**
     * Gets client_user_id
     * @return string
     */
    public function getClientUserId()
    {
        return $this->client_user_id;
    }
  
    /**
     * Sets client_user_id
     * @param string $client_user_id 
     * @return $this
     */
    public function setClientUserId($client_user_id)
    {
        $this->client_user_id = $client_user_id;
        return $this;
    }
    /**
      * $from_date 
      * @var string
      */
    protected $from_date;

    /**
     * Gets from_date
     * @return string
     */
    public function getFromDate()
    {
        return $this->from_date;
    }
  
    /**
     * Sets from_date
     * @param string $from_date 
     * @return $this
     */
    public function setFromDate($from_date)
    {
        $this->from_date = $from_date;
        return $this;
    }
    /**
      * $page_number 
      * @var string
      */
    protected $page_number;

    /**
     * Gets page_number
     * @return string
     */
    public function getPageNumber()
    {
        return $this->page_number;
    }
  
    /**
     * Sets page_number
     * @param string $page_number 
     * @return $this
     */
    public function setPageNumber($page_number)
    {
        $this->page_number = $page_number;
        return $this;
    }
    /**
      * $status 
      * @var string
      */
    protected $status;

    /**
     * Gets status
     * @return string
     */
    public function getStatus()
    {
        return $this->status;
    }
  
    /**
     * Sets status
     * @param string $status 
     * @return $this
     */
    public function setStatus($status)
    {
        $this->status = $status;
        return $this;
    }
    /**
      * $to_date 
      * @var string
      */
    protected $to_date;

    /**
     * Gets to_date
     * @return string
     */
    public function getToDate()
    {
        return $this->to_date;
    }
  
    /**
     * Sets to_date
     * @param string $to_date 
     * @return $this
     */
    public function setToDate($to_date)
    {
        $this->to_date = $to_date;
        return $this;
    }
}
class GetClickwrapsOptions
{
    /**
      * $from_date 
      * @var string
      */
    protected $from_date;

    /**
     * Gets from_date
     * @return string
     */
    public function getFromDate()
    {
        return $this->from_date;
    }
  
    /**
     * Sets from_date
     * @param string $from_date 
     * @return $this
     */
    public function setFromDate($from_date)
    {
        $this->from_date = $from_date;
        return $this;
    }
    /**
      * $owner_user_id 
      * @var string
      */
    protected $owner_user_id;

    /**
     * Gets owner_user_id
     * @return string
     */
    public function getOwnerUserId()
    {
        return $this->owner_user_id;
    }
  
    /**
     * Sets owner_user_id
     * @param string $owner_user_id 
     * @return $this
     */
    public function setOwnerUserId($owner_user_id)
    {
        $this->owner_user_id = $owner_user_id;
        return $this;
    }
    /**
      * $page_number 
      * @var string
      */
    protected $page_number;

    /**
     * Gets page_number
     * @return string
     */
    public function getPageNumber()
    {
        return $this->page_number;
    }
  
    /**
     * Sets page_number
     * @param string $page_number 
     * @return $this
     */
    public function setPageNumber($page_number)
    {
        $this->page_number = $page_number;
        return $this;
    }
    /**
      * $status 
      * @var string
      */
    protected $status;

    /**
     * Gets status
     * @return string
     */
    public function getStatus()
    {
        return $this->status;
    }
  
    /**
     * Sets status
     * @param string $status 
     * @return $this
     */
    public function setStatus($status)
    {
        $this->status = $status;
        return $this;
    }
    /**
      * $to_date 
      * @var string
      */
    protected $to_date;

    /**
     * Gets to_date
     * @return string
     */
    public function getToDate()
    {
        return $this->to_date;
    }
  
    /**
     * Sets to_date
     * @param string $to_date 
     * @return $this
     */
    public function setToDate($to_date)
    {
        $this->to_date = $to_date;
        return $this;
    }
}


namespace DocuSign\Click\Api;

use \DocuSign\Click\Client\ApiClient;
use \DocuSign\Click\Client\ApiException;
use \DocuSign\Click\Configuration;
use \DocuSign\Click\ObjectSerializer;

/**
 * AccountsApi Class Doc Comment
 *
 * @category Class
 * @package  DocuSign\Click
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AccountsApi
{
    /**
     * API Client
     *
     * @var \DocuSign\Click\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \DocuSign\Click\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\DocuSign\Click\Client\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \DocuSign\Click\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \DocuSign\Click\Client\ApiClient $apiClient set the API client
     *
     * @return AccountsApi
     */
    public function setApiClient(\DocuSign\Click\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation createClickwrap
     *
     * Creates a Clickwrap for the specified accountId
     *
    * @param string $account_id 
     * @param \DocuSign\Click\Model\ClickwrapRequest $clickwrap_request  (optional)
     * @throws \DocuSign\Click\Client\ApiException on non-2xx response
     * @return \DocuSign\Click\Model\ClickwrapVersionSummaryResponse
     */
    public function createClickwrap($account_id, $clickwrap_request = null)
    {
        list($response) = $this->createClickwrapWithHttpInfo($account_id, $clickwrap_request);
        return $response;
    }

    /**
     * Operation createClickwrapWithHttpInfo
     *
     * Creates a Clickwrap for the specified accountId
     *
    * @param string $account_id 
     * @param \DocuSign\Click\Model\ClickwrapRequest $clickwrap_request  (optional)
     * @throws \DocuSign\Click\Client\ApiException on non-2xx response
     * @return array of \DocuSign\Click\Model\ClickwrapVersionSummaryResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createClickwrapWithHttpInfo($account_id, $clickwrap_request = null)
    {
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling createClickwrap');
        }
        // parse inputs
        $resourcePath = "/v1/accounts/{accountId}/clickwraps";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);


        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace(
                "{" . "accountId" . "}",
                $this->apiClient->getSerializer()->toPathValue($account_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($clickwrap_request)) {
            $_tempBody = $clickwrap_request;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DocuSign\Click\Model\ClickwrapVersionSummaryResponse',
                '/v1/accounts/{accountId}/clickwraps'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DocuSign\Click\Model\ClickwrapVersionSummaryResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Click\Model\ClickwrapVersionSummaryResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Click\Model\ErrorDetails', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createClickwrapVersion
     *
     * Creates the clickwrap version
     *
    * @param string $account_id 
    * @param string $clickwrap_id 
     * @param \DocuSign\Click\Model\ClickwrapRequest $clickwrap_request  (optional)
     * @throws \DocuSign\Click\Client\ApiException on non-2xx response
     * @return \DocuSign\Click\Model\ClickwrapVersionSummaryResponse
     */
    public function createClickwrapVersion($account_id, $clickwrap_id, $clickwrap_request = null)
    {
        list($response) = $this->createClickwrapVersionWithHttpInfo($account_id, $clickwrap_id, $clickwrap_request);
        return $response;
    }

    /**
     * Operation createClickwrapVersionWithHttpInfo
     *
     * Creates the clickwrap version
     *
    * @param string $account_id 
    * @param string $clickwrap_id 
     * @param \DocuSign\Click\Model\ClickwrapRequest $clickwrap_request  (optional)
     * @throws \DocuSign\Click\Client\ApiException on non-2xx response
     * @return array of \DocuSign\Click\Model\ClickwrapVersionSummaryResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createClickwrapVersionWithHttpInfo($account_id, $clickwrap_id, $clickwrap_request = null)
    {
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling createClickwrapVersion');
        }
        // verify the required parameter 'clickwrap_id' is set
        if ($clickwrap_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $clickwrap_id when calling createClickwrapVersion');
        }
        // parse inputs
        $resourcePath = "/v1/accounts/{accountId}/clickwraps/{clickwrapId}/versions";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);


        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace(
                "{" . "accountId" . "}",
                $this->apiClient->getSerializer()->toPathValue($account_id),
                $resourcePath
            );
        }
        // path params
        if ($clickwrap_id !== null) {
            $resourcePath = str_replace(
                "{" . "clickwrapId" . "}",
                $this->apiClient->getSerializer()->toPathValue($clickwrap_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($clickwrap_request)) {
            $_tempBody = $clickwrap_request;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DocuSign\Click\Model\ClickwrapVersionSummaryResponse',
                '/v1/accounts/{accountId}/clickwraps/{clickwrapId}/versions'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DocuSign\Click\Model\ClickwrapVersionSummaryResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Click\Model\ClickwrapVersionSummaryResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Click\Model\ErrorDetails', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createHasAgreed
     *
     * Checks if a user has agreed to a clickwrap and returns a response with the agreement url. Returns HttpStatusCode.OK if user has no pending agreement.
     *
    * @param string $account_id 
    * @param string $clickwrap_id 
     * @param \DocuSign\Click\Model\UserAgreementRequest $user_agreement_request  (optional)
     * @throws \DocuSign\Click\Client\ApiException on non-2xx response
     * @return \DocuSign\Click\Model\UserAgreementResponse
     */
    public function createHasAgreed($account_id, $clickwrap_id, $user_agreement_request = null)
    {
        list($response) = $this->createHasAgreedWithHttpInfo($account_id, $clickwrap_id, $user_agreement_request);
        return $response;
    }

    /**
     * Operation createHasAgreedWithHttpInfo
     *
     * Checks if a user has agreed to a clickwrap and returns a response with the agreement url. Returns HttpStatusCode.OK if user has no pending agreement.
     *
    * @param string $account_id 
    * @param string $clickwrap_id 
     * @param \DocuSign\Click\Model\UserAgreementRequest $user_agreement_request  (optional)
     * @throws \DocuSign\Click\Client\ApiException on non-2xx response
     * @return array of \DocuSign\Click\Model\UserAgreementResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createHasAgreedWithHttpInfo($account_id, $clickwrap_id, $user_agreement_request = null)
    {
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling createHasAgreed');
        }
        // verify the required parameter 'clickwrap_id' is set
        if ($clickwrap_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $clickwrap_id when calling createHasAgreed');
        }
        // parse inputs
        $resourcePath = "/v1/accounts/{accountId}/clickwraps/{clickwrapId}/agreements";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);


        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace(
                "{" . "accountId" . "}",
                $this->apiClient->getSerializer()->toPathValue($account_id),
                $resourcePath
            );
        }
        // path params
        if ($clickwrap_id !== null) {
            $resourcePath = str_replace(
                "{" . "clickwrapId" . "}",
                $this->apiClient->getSerializer()->toPathValue($clickwrap_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($user_agreement_request)) {
            $_tempBody = $user_agreement_request;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DocuSign\Click\Model\UserAgreementResponse',
                '/v1/accounts/{accountId}/clickwraps/{clickwrapId}/agreements'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DocuSign\Click\Model\UserAgreementResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Click\Model\UserAgreementResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Click\Model\ErrorDetails', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteClickwrap
     *
     * Deletes the clickwrap and all its version specified by clickwrapId. Active clickwrap will not get deleted
     *
    * @param string $account_id 
    * @param string $clickwrap_id 
     * @param  $options Options for modifying the behavior of the function. (optional)
     * @throws \DocuSign\Click\Client\ApiException on non-2xx response
     * @return \DocuSign\Click\Model\ClickwrapVersionsDeleteResponse
     */
    public function deleteClickwrap($account_id, $clickwrap_id, AccountsApi\DeleteClickwrapOptions $options = null)
    {
        list($response) = $this->deleteClickwrapWithHttpInfo($account_id, $clickwrap_id, $options);
        return $response;
    }

    /**
     * Operation deleteClickwrapWithHttpInfo
     *
     * Deletes the clickwrap and all its version specified by clickwrapId. Active clickwrap will not get deleted
     *
    * @param string $account_id 
    * @param string $clickwrap_id 
     * @param  $options Options for modifying the behavior of the function. (optional)
     * @throws \DocuSign\Click\Client\ApiException on non-2xx response
     * @return array of \DocuSign\Click\Model\ClickwrapVersionsDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteClickwrapWithHttpInfo($account_id, $clickwrap_id, AccountsApi\DeleteClickwrapOptions $options = null)
    {
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling deleteClickwrap');
        }
        // verify the required parameter 'clickwrap_id' is set
        if ($clickwrap_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $clickwrap_id when calling deleteClickwrap');
        }
        // parse inputs
        $resourcePath = "/v1/accounts/{accountId}/clickwraps/{clickwrapId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        if ($options != null)
        {
        // query params
        // query params
        if ($options->getVersions() !== null) {
            $queryParams['versions'] = $this->apiClient->getSerializer()->toQueryValue($options->getVersions());
        }
        }

        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace(
                "{" . "accountId" . "}",
                $this->apiClient->getSerializer()->toPathValue($account_id),
                $resourcePath
            );
        }
        // path params
        if ($clickwrap_id !== null) {
            $resourcePath = str_replace(
                "{" . "clickwrapId" . "}",
                $this->apiClient->getSerializer()->toPathValue($clickwrap_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DocuSign\Click\Model\ClickwrapVersionsDeleteResponse',
                '/v1/accounts/{accountId}/clickwraps/{clickwrapId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DocuSign\Click\Model\ClickwrapVersionsDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Click\Model\ClickwrapVersionsDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Click\Model\ErrorDetails', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteClickwrapVersion
     *
     * Delete a Clickwrap version specified by versionId
     *
    * @param string $account_id 
    * @param string $clickwrap_id 
    * @param string $version_id 
     * @throws \DocuSign\Click\Client\ApiException on non-2xx response
     * @return \DocuSign\Click\Model\ClickwrapVersionDeleteResponse
     */
    public function deleteClickwrapVersion($account_id, $clickwrap_id, $version_id)
    {
        list($response) = $this->deleteClickwrapVersionWithHttpInfo($account_id, $clickwrap_id, $version_id);
        return $response;
    }

    /**
     * Operation deleteClickwrapVersionWithHttpInfo
     *
     * Delete a Clickwrap version specified by versionId
     *
    * @param string $account_id 
    * @param string $clickwrap_id 
    * @param string $version_id 
     * @throws \DocuSign\Click\Client\ApiException on non-2xx response
     * @return array of \DocuSign\Click\Model\ClickwrapVersionDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteClickwrapVersionWithHttpInfo($account_id, $clickwrap_id, $version_id)
    {
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling deleteClickwrapVersion');
        }
        // verify the required parameter 'clickwrap_id' is set
        if ($clickwrap_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $clickwrap_id when calling deleteClickwrapVersion');
        }
        // verify the required parameter 'version_id' is set
        if ($version_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $version_id when calling deleteClickwrapVersion');
        }
        // parse inputs
        $resourcePath = "/v1/accounts/{accountId}/clickwraps/{clickwrapId}/versions/{versionId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);


        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace(
                "{" . "accountId" . "}",
                $this->apiClient->getSerializer()->toPathValue($account_id),
                $resourcePath
            );
        }
        // path params
        if ($clickwrap_id !== null) {
            $resourcePath = str_replace(
                "{" . "clickwrapId" . "}",
                $this->apiClient->getSerializer()->toPathValue($clickwrap_id),
                $resourcePath
            );
        }
        // path params
        if ($version_id !== null) {
            $resourcePath = str_replace(
                "{" . "versionId" . "}",
                $this->apiClient->getSerializer()->toPathValue($version_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DocuSign\Click\Model\ClickwrapVersionDeleteResponse',
                '/v1/accounts/{accountId}/clickwraps/{clickwrapId}/versions/{versionId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DocuSign\Click\Model\ClickwrapVersionDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Click\Model\ClickwrapVersionDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Click\Model\ErrorDetails', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteClickwrapVersionByNumber
     *
     * Delete a Clickwrap version specified by versionNumber. Use versionId instead of versionNumber
     *
    * @param string $account_id 
    * @param string $clickwrap_id 
    * @param string $version_number 
     * @throws \DocuSign\Click\Client\ApiException on non-2xx response
     * @return \DocuSign\Click\Model\ClickwrapVersionSummaryResponse
     */
    public function deleteClickwrapVersionByNumber($account_id, $clickwrap_id, $version_number)
    {
        list($response) = $this->deleteClickwrapVersionByNumberWithHttpInfo($account_id, $clickwrap_id, $version_number);
        return $response;
    }

    /**
     * Operation deleteClickwrapVersionByNumberWithHttpInfo
     *
     * Delete a Clickwrap version specified by versionNumber. Use versionId instead of versionNumber
     *
    * @param string $account_id 
    * @param string $clickwrap_id 
    * @param string $version_number 
     * @throws \DocuSign\Click\Client\ApiException on non-2xx response
     * @return array of \DocuSign\Click\Model\ClickwrapVersionSummaryResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteClickwrapVersionByNumberWithHttpInfo($account_id, $clickwrap_id, $version_number)
    {
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling deleteClickwrapVersionByNumber');
        }
        // verify the required parameter 'clickwrap_id' is set
        if ($clickwrap_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $clickwrap_id when calling deleteClickwrapVersionByNumber');
        }
        // verify the required parameter 'version_number' is set
        if ($version_number === null) {
            throw new \InvalidArgumentException('Missing the required parameter $version_number when calling deleteClickwrapVersionByNumber');
        }
        // parse inputs
        $resourcePath = "/v1/accounts/{accountId}/clickwraps/{clickwrapId}/versions/{versionNumber}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);


        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace(
                "{" . "accountId" . "}",
                $this->apiClient->getSerializer()->toPathValue($account_id),
                $resourcePath
            );
        }
        // path params
        if ($clickwrap_id !== null) {
            $resourcePath = str_replace(
                "{" . "clickwrapId" . "}",
                $this->apiClient->getSerializer()->toPathValue($clickwrap_id),
                $resourcePath
            );
        }
        // path params
        if ($version_number !== null) {
            $resourcePath = str_replace(
                "{" . "versionNumber" . "}",
                $this->apiClient->getSerializer()->toPathValue($version_number),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DocuSign\Click\Model\ClickwrapVersionSummaryResponse',
                '/v1/accounts/{accountId}/clickwraps/{clickwrapId}/versions/{versionNumber}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DocuSign\Click\Model\ClickwrapVersionSummaryResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Click\Model\ClickwrapVersionSummaryResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Click\Model\ErrorDetails', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteClickwrapVersions
     *
     * Deletes the versions specified by query parameter clickwrapVersionIds for a clickwrap, or all versions if no query parameter is specified. It will not delete if a version is active.
     *
    * @param string $account_id 
    * @param string $clickwrap_id 
     * @param  $options Options for modifying the behavior of the function. (optional)
     * @throws \DocuSign\Click\Client\ApiException on non-2xx response
     * @return \DocuSign\Click\Model\ClickwrapVersionsDeleteResponse
     */
    public function deleteClickwrapVersions($account_id, $clickwrap_id, AccountsApi\DeleteClickwrapVersionsOptions $options = null)
    {
        list($response) = $this->deleteClickwrapVersionsWithHttpInfo($account_id, $clickwrap_id, $options);
        return $response;
    }

    /**
     * Operation deleteClickwrapVersionsWithHttpInfo
     *
     * Deletes the versions specified by query parameter clickwrapVersionIds for a clickwrap, or all versions if no query parameter is specified. It will not delete if a version is active.
     *
    * @param string $account_id 
    * @param string $clickwrap_id 
     * @param  $options Options for modifying the behavior of the function. (optional)
     * @throws \DocuSign\Click\Client\ApiException on non-2xx response
     * @return array of \DocuSign\Click\Model\ClickwrapVersionsDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteClickwrapVersionsWithHttpInfo($account_id, $clickwrap_id, AccountsApi\DeleteClickwrapVersionsOptions $options = null)
    {
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling deleteClickwrapVersions');
        }
        // verify the required parameter 'clickwrap_id' is set
        if ($clickwrap_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $clickwrap_id when calling deleteClickwrapVersions');
        }
        // parse inputs
        $resourcePath = "/v1/accounts/{accountId}/clickwraps/{clickwrapId}/versions";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        if ($options != null)
        {
        // query params
        // query params
        if ($options->getClickwrapVersionIds() !== null) {
            $queryParams['clickwrapVersionIds'] = $this->apiClient->getSerializer()->toQueryValue($options->getClickwrapVersionIds());
        }
        }

        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace(
                "{" . "accountId" . "}",
                $this->apiClient->getSerializer()->toPathValue($account_id),
                $resourcePath
            );
        }
        // path params
        if ($clickwrap_id !== null) {
            $resourcePath = str_replace(
                "{" . "clickwrapId" . "}",
                $this->apiClient->getSerializer()->toPathValue($clickwrap_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DocuSign\Click\Model\ClickwrapVersionsDeleteResponse',
                '/v1/accounts/{accountId}/clickwraps/{clickwrapId}/versions'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DocuSign\Click\Model\ClickwrapVersionsDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Click\Model\ClickwrapVersionsDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Click\Model\ErrorDetails', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteClickwraps
     *
     * Deletes all the clickwraps for an account or the ones passed in query parameter clickwrapIds. It will not delete active clickwraps.
     *
    * @param string $account_id 
     * @param  $options Options for modifying the behavior of the function. (optional)
     * @throws \DocuSign\Click\Client\ApiException on non-2xx response
     * @return \DocuSign\Click\Model\ClickwrapsDeleteResponse
     */
    public function deleteClickwraps($account_id, AccountsApi\DeleteClickwrapsOptions $options = null)
    {
        list($response) = $this->deleteClickwrapsWithHttpInfo($account_id, $options);
        return $response;
    }

    /**
     * Operation deleteClickwrapsWithHttpInfo
     *
     * Deletes all the clickwraps for an account or the ones passed in query parameter clickwrapIds. It will not delete active clickwraps.
     *
    * @param string $account_id 
     * @param  $options Options for modifying the behavior of the function. (optional)
     * @throws \DocuSign\Click\Client\ApiException on non-2xx response
     * @return array of \DocuSign\Click\Model\ClickwrapsDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteClickwrapsWithHttpInfo($account_id, AccountsApi\DeleteClickwrapsOptions $options = null)
    {
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling deleteClickwraps');
        }
        // parse inputs
        $resourcePath = "/v1/accounts/{accountId}/clickwraps";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        if ($options != null)
        {
        // query params
        // query params
        if ($options->getClickwrapIds() !== null) {
            $queryParams['clickwrapIds'] = $this->apiClient->getSerializer()->toQueryValue($options->getClickwrapIds());
        }
        }

        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace(
                "{" . "accountId" . "}",
                $this->apiClient->getSerializer()->toPathValue($account_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DocuSign\Click\Model\ClickwrapsDeleteResponse',
                '/v1/accounts/{accountId}/clickwraps'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DocuSign\Click\Model\ClickwrapsDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Click\Model\ClickwrapsDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Click\Model\ErrorDetails', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getAgreement
     *
     * 
     *
    * @param string $account_id 
    * @param string $agreement_id 
    * @param string $clickwrap_id 
     * @throws \DocuSign\Click\Client\ApiException on non-2xx response
     * @return \DocuSign\Click\Model\UserAgreementResponse
     */
    public function getAgreement($account_id, $agreement_id, $clickwrap_id)
    {
        list($response) = $this->getAgreementWithHttpInfo($account_id, $agreement_id, $clickwrap_id);
        return $response;
    }

    /**
     * Operation getAgreementWithHttpInfo
     *
     * 
     *
    * @param string $account_id 
    * @param string $agreement_id 
    * @param string $clickwrap_id 
     * @throws \DocuSign\Click\Client\ApiException on non-2xx response
     * @return array of \DocuSign\Click\Model\UserAgreementResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAgreementWithHttpInfo($account_id, $agreement_id, $clickwrap_id)
    {
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling getAgreement');
        }
        // verify the required parameter 'agreement_id' is set
        if ($agreement_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $agreement_id when calling getAgreement');
        }
        // verify the required parameter 'clickwrap_id' is set
        if ($clickwrap_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $clickwrap_id when calling getAgreement');
        }
        // parse inputs
        $resourcePath = "/v1/accounts/{accountId}/clickwraps/{clickwrapId}/agreements/{agreementId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);


        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace(
                "{" . "accountId" . "}",
                $this->apiClient->getSerializer()->toPathValue($account_id),
                $resourcePath
            );
        }
        // path params
        if ($agreement_id !== null) {
            $resourcePath = str_replace(
                "{" . "agreementId" . "}",
                $this->apiClient->getSerializer()->toPathValue($agreement_id),
                $resourcePath
            );
        }
        // path params
        if ($clickwrap_id !== null) {
            $resourcePath = str_replace(
                "{" . "clickwrapId" . "}",
                $this->apiClient->getSerializer()->toPathValue($clickwrap_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DocuSign\Click\Model\UserAgreementResponse',
                '/v1/accounts/{accountId}/clickwraps/{clickwrapId}/agreements/{agreementId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DocuSign\Click\Model\UserAgreementResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Click\Model\UserAgreementResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Click\Model\ErrorDetails', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getAgreementPdf
     *
     * 
     *
    * @param string $account_id 
    * @param string $agreement_id 
    * @param string $clickwrap_id 
     * @throws \DocuSign\Click\Client\ApiException on non-2xx response
     * @return void
     */
    public function getAgreementPdf($account_id, $agreement_id, $clickwrap_id)
    {
        list($response) = $this->getAgreementPdfWithHttpInfo($account_id, $agreement_id, $clickwrap_id);
        return $response;
    }

    /**
     * Operation getAgreementPdfWithHttpInfo
     *
     * 
     *
    * @param string $account_id 
    * @param string $agreement_id 
    * @param string $clickwrap_id 
     * @throws \DocuSign\Click\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAgreementPdfWithHttpInfo($account_id, $agreement_id, $clickwrap_id)
    {
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling getAgreementPdf');
        }
        // verify the required parameter 'agreement_id' is set
        if ($agreement_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $agreement_id when calling getAgreementPdf');
        }
        // verify the required parameter 'clickwrap_id' is set
        if ($clickwrap_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $clickwrap_id when calling getAgreementPdf');
        }
        // parse inputs
        $resourcePath = "/v1/accounts/{accountId}/clickwraps/{clickwrapId}/agreements/{agreementId}/download";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);


        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace(
                "{" . "accountId" . "}",
                $this->apiClient->getSerializer()->toPathValue($account_id),
                $resourcePath
            );
        }
        // path params
        if ($agreement_id !== null) {
            $resourcePath = str_replace(
                "{" . "agreementId" . "}",
                $this->apiClient->getSerializer()->toPathValue($agreement_id),
                $resourcePath
            );
        }
        // path params
        if ($clickwrap_id !== null) {
            $resourcePath = str_replace(
                "{" . "clickwrapId" . "}",
                $this->apiClient->getSerializer()->toPathValue($clickwrap_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/v1/accounts/{accountId}/clickwraps/{clickwrapId}/agreements/{agreementId}/download'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Click\Model\ErrorDetails', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getClickwrap
     *
     * Gets the clickwrap for an account specified by clickwrapId
     *
    * @param string $account_id 
    * @param string $clickwrap_id 
     * @throws \DocuSign\Click\Client\ApiException on non-2xx response
     * @return \DocuSign\Click\Model\ClickwrapVersionResponse
     */
    public function getClickwrap($account_id, $clickwrap_id)
    {
        list($response) = $this->getClickwrapWithHttpInfo($account_id, $clickwrap_id);
        return $response;
    }

    /**
     * Operation getClickwrapWithHttpInfo
     *
     * Gets the clickwrap for an account specified by clickwrapId
     *
    * @param string $account_id 
    * @param string $clickwrap_id 
     * @throws \DocuSign\Click\Client\ApiException on non-2xx response
     * @return array of \DocuSign\Click\Model\ClickwrapVersionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getClickwrapWithHttpInfo($account_id, $clickwrap_id)
    {
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling getClickwrap');
        }
        // verify the required parameter 'clickwrap_id' is set
        if ($clickwrap_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $clickwrap_id when calling getClickwrap');
        }
        // parse inputs
        $resourcePath = "/v1/accounts/{accountId}/clickwraps/{clickwrapId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);


        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace(
                "{" . "accountId" . "}",
                $this->apiClient->getSerializer()->toPathValue($account_id),
                $resourcePath
            );
        }
        // path params
        if ($clickwrap_id !== null) {
            $resourcePath = str_replace(
                "{" . "clickwrapId" . "}",
                $this->apiClient->getSerializer()->toPathValue($clickwrap_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DocuSign\Click\Model\ClickwrapVersionResponse',
                '/v1/accounts/{accountId}/clickwraps/{clickwrapId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DocuSign\Click\Model\ClickwrapVersionResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Click\Model\ClickwrapVersionResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Click\Model\ErrorDetails', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getClickwrapAgreements
     *
     * Gets the Clickwraps for an account
     *
    * @param string $account_id 
    * @param string $clickwrap_id 
     * @param  $options Options for modifying the behavior of the function. (optional)
     * @throws \DocuSign\Click\Client\ApiException on non-2xx response
     * @return \DocuSign\Click\Model\ClickwrapAgreementsResponse
     */
    public function getClickwrapAgreements($account_id, $clickwrap_id, AccountsApi\GetClickwrapAgreementsOptions $options = null)
    {
        list($response) = $this->getClickwrapAgreementsWithHttpInfo($account_id, $clickwrap_id, $options);
        return $response;
    }

    /**
     * Operation getClickwrapAgreementsWithHttpInfo
     *
     * Gets the Clickwraps for an account
     *
    * @param string $account_id 
    * @param string $clickwrap_id 
     * @param  $options Options for modifying the behavior of the function. (optional)
     * @throws \DocuSign\Click\Client\ApiException on non-2xx response
     * @return array of \DocuSign\Click\Model\ClickwrapAgreementsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getClickwrapAgreementsWithHttpInfo($account_id, $clickwrap_id, AccountsApi\GetClickwrapAgreementsOptions $options = null)
    {
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling getClickwrapAgreements');
        }
        // verify the required parameter 'clickwrap_id' is set
        if ($clickwrap_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $clickwrap_id when calling getClickwrapAgreements');
        }
        // verify the required parameter 'client_user_id' is set
        if ($options === null && $options->getClientUserId() === null) {
            throw new \InvalidArgumentException('Missing the required parameter $client_user_id when calling getClickwrapAgreements');
        }
        // verify the required parameter 'status' is set
        if ($options->getStatus() === null) {
            throw new \InvalidArgumentException('Missing the required parameter $status when calling getClickwrapAgreements');
        }
        // parse inputs
        $resourcePath = "/v1/accounts/{accountId}/clickwraps/{clickwrapId}/users";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        if ($options != null)
        {
        // query params
        // query params
        if ($options->getClientUserId() !== null) {
            $queryParams['client_user_id'] = $this->apiClient->getSerializer()->toQueryValue($options->getClientUserId());
        }
        // query params
        if ($options->getFromDate() !== null) {
            $queryParams['from_date'] = $this->apiClient->getSerializer()->toQueryValue($options->getFromDate());
        }
        // query params
        if ($options->getPageNumber() !== null) {
            $queryParams['page_number'] = $this->apiClient->getSerializer()->toQueryValue($options->getPageNumber());
        }
        // query params
        if ($options->getStatus() !== null) {
            $queryParams['status'] = $this->apiClient->getSerializer()->toQueryValue($options->getStatus());
        }
        // query params
        if ($options->getToDate() !== null) {
            $queryParams['to_date'] = $this->apiClient->getSerializer()->toQueryValue($options->getToDate());
        }
        }

        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace(
                "{" . "accountId" . "}",
                $this->apiClient->getSerializer()->toPathValue($account_id),
                $resourcePath
            );
        }
        // path params
        if ($clickwrap_id !== null) {
            $resourcePath = str_replace(
                "{" . "clickwrapId" . "}",
                $this->apiClient->getSerializer()->toPathValue($clickwrap_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DocuSign\Click\Model\ClickwrapAgreementsResponse',
                '/v1/accounts/{accountId}/clickwraps/{clickwrapId}/users'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DocuSign\Click\Model\ClickwrapAgreementsResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Click\Model\ClickwrapAgreementsResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Click\Model\ErrorDetails', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getClickwrapVersion
     *
     * Gets the Clickwrap version by clickwrapId and versionId for an account
     *
    * @param string $account_id 
    * @param string $clickwrap_id 
    * @param string $version_id 
     * @throws \DocuSign\Click\Client\ApiException on non-2xx response
     * @return \DocuSign\Click\Model\ClickwrapVersionResponse
     */
    public function getClickwrapVersion($account_id, $clickwrap_id, $version_id)
    {
        list($response) = $this->getClickwrapVersionWithHttpInfo($account_id, $clickwrap_id, $version_id);
        return $response;
    }

    /**
     * Operation getClickwrapVersionWithHttpInfo
     *
     * Gets the Clickwrap version by clickwrapId and versionId for an account
     *
    * @param string $account_id 
    * @param string $clickwrap_id 
    * @param string $version_id 
     * @throws \DocuSign\Click\Client\ApiException on non-2xx response
     * @return array of \DocuSign\Click\Model\ClickwrapVersionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getClickwrapVersionWithHttpInfo($account_id, $clickwrap_id, $version_id)
    {
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling getClickwrapVersion');
        }
        // verify the required parameter 'clickwrap_id' is set
        if ($clickwrap_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $clickwrap_id when calling getClickwrapVersion');
        }
        // verify the required parameter 'version_id' is set
        if ($version_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $version_id when calling getClickwrapVersion');
        }
        // parse inputs
        $resourcePath = "/v1/accounts/{accountId}/clickwraps/{clickwrapId}/versions/{versionId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);


        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace(
                "{" . "accountId" . "}",
                $this->apiClient->getSerializer()->toPathValue($account_id),
                $resourcePath
            );
        }
        // path params
        if ($clickwrap_id !== null) {
            $resourcePath = str_replace(
                "{" . "clickwrapId" . "}",
                $this->apiClient->getSerializer()->toPathValue($clickwrap_id),
                $resourcePath
            );
        }
        // path params
        if ($version_id !== null) {
            $resourcePath = str_replace(
                "{" . "versionId" . "}",
                $this->apiClient->getSerializer()->toPathValue($version_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DocuSign\Click\Model\ClickwrapVersionResponse',
                '/v1/accounts/{accountId}/clickwraps/{clickwrapId}/versions/{versionId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DocuSign\Click\Model\ClickwrapVersionResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Click\Model\ClickwrapVersionResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Click\Model\ErrorDetails', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getClickwrapVersionAgreements
     *
     * Gets the agreement responses for a clickwrap version
     *
    * @param string $account_id 
    * @param string $clickwrap_id 
    * @param string $version_id 
     * @param  $options Options for modifying the behavior of the function. (optional)
     * @throws \DocuSign\Click\Client\ApiException on non-2xx response
     * @return \DocuSign\Click\Model\ClickwrapAgreementsResponse
     */
    public function getClickwrapVersionAgreements($account_id, $clickwrap_id, $version_id, AccountsApi\GetClickwrapVersionAgreementsOptions $options = null)
    {
        list($response) = $this->getClickwrapVersionAgreementsWithHttpInfo($account_id, $clickwrap_id, $version_id, $options);
        return $response;
    }

    /**
     * Operation getClickwrapVersionAgreementsWithHttpInfo
     *
     * Gets the agreement responses for a clickwrap version
     *
    * @param string $account_id 
    * @param string $clickwrap_id 
    * @param string $version_id 
     * @param  $options Options for modifying the behavior of the function. (optional)
     * @throws \DocuSign\Click\Client\ApiException on non-2xx response
     * @return array of \DocuSign\Click\Model\ClickwrapAgreementsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getClickwrapVersionAgreementsWithHttpInfo($account_id, $clickwrap_id, $version_id, AccountsApi\GetClickwrapVersionAgreementsOptions $options = null)
    {
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling getClickwrapVersionAgreements');
        }
        // verify the required parameter 'clickwrap_id' is set
        if ($clickwrap_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $clickwrap_id when calling getClickwrapVersionAgreements');
        }
        // verify the required parameter 'version_id' is set
        if ($version_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $version_id when calling getClickwrapVersionAgreements');
        }
        // verify the required parameter 'client_user_id' is set
        if ($options === null && $options->getClientUserId() === null) {
            throw new \InvalidArgumentException('Missing the required parameter $client_user_id when calling getClickwrapAgreements');
        }
        // parse inputs
        $resourcePath = "/v1/accounts/{accountId}/clickwraps/{clickwrapId}/versions/{versionId}/users";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        if ($options != null)
        {
        // query params
        // query params
        if ($options->getClientUserId() !== null) {
            $queryParams['client_user_id'] = $this->apiClient->getSerializer()->toQueryValue($options->getClientUserId());
        }
        // query params
        if ($options->getFromDate() !== null) {
            $queryParams['from_date'] = $this->apiClient->getSerializer()->toQueryValue($options->getFromDate());
        }
        // query params
        if ($options->getPageNumber() !== null) {
            $queryParams['page_number'] = $this->apiClient->getSerializer()->toQueryValue($options->getPageNumber());
        }
        // query params
        if ($options->getStatus() !== null) {
            $queryParams['status'] = $this->apiClient->getSerializer()->toQueryValue($options->getStatus());
        }
        // query params
        if ($options->getToDate() !== null) {
            $queryParams['to_date'] = $this->apiClient->getSerializer()->toQueryValue($options->getToDate());
        }
        }

        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace(
                "{" . "accountId" . "}",
                $this->apiClient->getSerializer()->toPathValue($account_id),
                $resourcePath
            );
        }
        // path params
        if ($clickwrap_id !== null) {
            $resourcePath = str_replace(
                "{" . "clickwrapId" . "}",
                $this->apiClient->getSerializer()->toPathValue($clickwrap_id),
                $resourcePath
            );
        }
        // path params
        if ($version_id !== null) {
            $resourcePath = str_replace(
                "{" . "versionId" . "}",
                $this->apiClient->getSerializer()->toPathValue($version_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DocuSign\Click\Model\ClickwrapAgreementsResponse',
                '/v1/accounts/{accountId}/clickwraps/{clickwrapId}/versions/{versionId}/users'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DocuSign\Click\Model\ClickwrapAgreementsResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Click\Model\ClickwrapAgreementsResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Click\Model\ErrorDetails', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getClickwrapVersionAgreementsByNumber
     *
     * Gets the agreement responses for a clickwrap version
     *
    * @param string $account_id 
    * @param string $clickwrap_id 
    * @param string $version_number 
     * @param  $options Options for modifying the behavior of the function. (optional)
     * @throws \DocuSign\Click\Client\ApiException on non-2xx response
     * @return \DocuSign\Click\Model\ClickwrapAgreementsResponse
     */
    public function getClickwrapVersionAgreementsByNumber($account_id, $clickwrap_id, $version_number, AccountsApi\GetClickwrapVersionAgreementsByNumberOptions $options = null)
    {
        list($response) = $this->getClickwrapVersionAgreementsByNumberWithHttpInfo($account_id, $clickwrap_id, $version_number, $options);
        return $response;
    }

    /**
     * Operation getClickwrapVersionAgreementsByNumberWithHttpInfo
     *
     * Gets the agreement responses for a clickwrap version
     *
    * @param string $account_id 
    * @param string $clickwrap_id 
    * @param string $version_number 
     * @param  $options Options for modifying the behavior of the function. (optional)
     * @throws \DocuSign\Click\Client\ApiException on non-2xx response
     * @return array of \DocuSign\Click\Model\ClickwrapAgreementsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getClickwrapVersionAgreementsByNumberWithHttpInfo($account_id, $clickwrap_id, $version_number, AccountsApi\GetClickwrapVersionAgreementsByNumberOptions $options = null)
    {
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling getClickwrapVersionAgreementsByNumber');
        }
        // verify the required parameter 'clickwrap_id' is set
        if ($clickwrap_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $clickwrap_id when calling getClickwrapVersionAgreementsByNumber');
        }
        // verify the required parameter 'version_number' is set
        if ($version_number === null) {
            throw new \InvalidArgumentException('Missing the required parameter $version_number when calling getClickwrapVersionAgreementsByNumber');
        }
        // verify the required parameter 'client_user_id' is set
        if ($options === null && $options->getClientUserId() === null) {
            throw new \InvalidArgumentException('Missing the required parameter $client_user_id when calling getClickwrapAgreements');
        }
        // parse inputs
        $resourcePath = "/v1/accounts/{accountId}/clickwraps/{clickwrapId}/versions/{versionNumber}/users";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        if ($options != null)
        {
        // query params
        // query params
        if ($options->getClientUserId() !== null) {
            $queryParams['client_user_id'] = $this->apiClient->getSerializer()->toQueryValue($options->getClientUserId());
        }
        // query params
        if ($options->getFromDate() !== null) {
            $queryParams['from_date'] = $this->apiClient->getSerializer()->toQueryValue($options->getFromDate());
        }
        // query params
        if ($options->getPageNumber() !== null) {
            $queryParams['page_number'] = $this->apiClient->getSerializer()->toQueryValue($options->getPageNumber());
        }
        // query params
        if ($options->getStatus() !== null) {
            $queryParams['status'] = $this->apiClient->getSerializer()->toQueryValue($options->getStatus());
        }
        // query params
        if ($options->getToDate() !== null) {
            $queryParams['to_date'] = $this->apiClient->getSerializer()->toQueryValue($options->getToDate());
        }
        }

        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace(
                "{" . "accountId" . "}",
                $this->apiClient->getSerializer()->toPathValue($account_id),
                $resourcePath
            );
        }
        // path params
        if ($clickwrap_id !== null) {
            $resourcePath = str_replace(
                "{" . "clickwrapId" . "}",
                $this->apiClient->getSerializer()->toPathValue($clickwrap_id),
                $resourcePath
            );
        }
        // path params
        if ($version_number !== null) {
            $resourcePath = str_replace(
                "{" . "versionNumber" . "}",
                $this->apiClient->getSerializer()->toPathValue($version_number),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DocuSign\Click\Model\ClickwrapAgreementsResponse',
                '/v1/accounts/{accountId}/clickwraps/{clickwrapId}/versions/{versionNumber}/users'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DocuSign\Click\Model\ClickwrapAgreementsResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Click\Model\ClickwrapAgreementsResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Click\Model\ErrorDetails', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getClickwrapVersionByNumber
     *
     * Gets the Clickwrap version by clickwrapId and versionNumber for an account
     *
    * @param string $account_id 
    * @param string $clickwrap_id 
    * @param string $version_number 
     * @throws \DocuSign\Click\Client\ApiException on non-2xx response
     * @return \DocuSign\Click\Model\ClickwrapVersionResponse
     */
    public function getClickwrapVersionByNumber($account_id, $clickwrap_id, $version_number)
    {
        list($response) = $this->getClickwrapVersionByNumberWithHttpInfo($account_id, $clickwrap_id, $version_number);
        return $response;
    }

    /**
     * Operation getClickwrapVersionByNumberWithHttpInfo
     *
     * Gets the Clickwrap version by clickwrapId and versionNumber for an account
     *
    * @param string $account_id 
    * @param string $clickwrap_id 
    * @param string $version_number 
     * @throws \DocuSign\Click\Client\ApiException on non-2xx response
     * @return array of \DocuSign\Click\Model\ClickwrapVersionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getClickwrapVersionByNumberWithHttpInfo($account_id, $clickwrap_id, $version_number)
    {
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling getClickwrapVersionByNumber');
        }
        // verify the required parameter 'clickwrap_id' is set
        if ($clickwrap_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $clickwrap_id when calling getClickwrapVersionByNumber');
        }
        // verify the required parameter 'version_number' is set
        if ($version_number === null) {
            throw new \InvalidArgumentException('Missing the required parameter $version_number when calling getClickwrapVersionByNumber');
        }
        // parse inputs
        $resourcePath = "/v1/accounts/{accountId}/clickwraps/{clickwrapId}/versions/{versionNumber}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);


        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace(
                "{" . "accountId" . "}",
                $this->apiClient->getSerializer()->toPathValue($account_id),
                $resourcePath
            );
        }
        // path params
        if ($clickwrap_id !== null) {
            $resourcePath = str_replace(
                "{" . "clickwrapId" . "}",
                $this->apiClient->getSerializer()->toPathValue($clickwrap_id),
                $resourcePath
            );
        }
        // path params
        if ($version_number !== null) {
            $resourcePath = str_replace(
                "{" . "versionNumber" . "}",
                $this->apiClient->getSerializer()->toPathValue($version_number),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DocuSign\Click\Model\ClickwrapVersionResponse',
                '/v1/accounts/{accountId}/clickwraps/{clickwrapId}/versions/{versionNumber}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DocuSign\Click\Model\ClickwrapVersionResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Click\Model\ClickwrapVersionResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Click\Model\ErrorDetails', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getClickwrapVersions
     *
     * Gets all the versions of a clickwrap for an account
     *
    * @param string $account_id 
    * @param string $clickwrap_id 
     * @throws \DocuSign\Click\Client\ApiException on non-2xx response
     * @return \DocuSign\Click\Model\ClickwrapVersionsPagedResponse
     */
    public function getClickwrapVersions($account_id, $clickwrap_id)
    {
        list($response) = $this->getClickwrapVersionsWithHttpInfo($account_id, $clickwrap_id);
        return $response;
    }

    /**
     * Operation getClickwrapVersionsWithHttpInfo
     *
     * Gets all the versions of a clickwrap for an account
     *
    * @param string $account_id 
    * @param string $clickwrap_id 
     * @throws \DocuSign\Click\Client\ApiException on non-2xx response
     * @return array of \DocuSign\Click\Model\ClickwrapVersionsPagedResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getClickwrapVersionsWithHttpInfo($account_id, $clickwrap_id)
    {
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling getClickwrapVersions');
        }
        // verify the required parameter 'clickwrap_id' is set
        if ($clickwrap_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $clickwrap_id when calling getClickwrapVersions');
        }
        // parse inputs
        $resourcePath = "/v1/accounts/{accountId}/clickwraps/{clickwrapId}/versions";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);


        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace(
                "{" . "accountId" . "}",
                $this->apiClient->getSerializer()->toPathValue($account_id),
                $resourcePath
            );
        }
        // path params
        if ($clickwrap_id !== null) {
            $resourcePath = str_replace(
                "{" . "clickwrapId" . "}",
                $this->apiClient->getSerializer()->toPathValue($clickwrap_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DocuSign\Click\Model\ClickwrapVersionsPagedResponse',
                '/v1/accounts/{accountId}/clickwraps/{clickwrapId}/versions'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DocuSign\Click\Model\ClickwrapVersionsPagedResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Click\Model\ClickwrapVersionsPagedResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Click\Model\ErrorDetails', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getClickwraps
     *
     * Gets the Clickwraps for an account
     *
    * @param string $account_id 
     * @param  $options Options for modifying the behavior of the function. (optional)
     * @throws \DocuSign\Click\Client\ApiException on non-2xx response
     * @return \DocuSign\Click\Model\ClickwrapVersionsResponse
     */
    public function getClickwraps($account_id, AccountsApi\GetClickwrapsOptions $options = null)
    {
        list($response) = $this->getClickwrapsWithHttpInfo($account_id, $options);
        return $response;
    }

    /**
     * Operation getClickwrapsWithHttpInfo
     *
     * Gets the Clickwraps for an account
     *
    * @param string $account_id 
     * @param  $options Options for modifying the behavior of the function. (optional)
     * @throws \DocuSign\Click\Client\ApiException on non-2xx response
     * @return array of \DocuSign\Click\Model\ClickwrapVersionsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getClickwrapsWithHttpInfo($account_id, AccountsApi\GetClickwrapsOptions $options = null)
    {
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling getClickwraps');
        }
        // parse inputs
        $resourcePath = "/v1/accounts/{accountId}/clickwraps";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        if ($options != null)
        {
        // query params
        // query params
        if ($options->getFromDate() !== null) {
            $queryParams['from_date'] = $this->apiClient->getSerializer()->toQueryValue($options->getFromDate());
        }
        // query params
        if ($options->getOwnerUserId() !== null) {
            $queryParams['ownerUserId'] = $this->apiClient->getSerializer()->toQueryValue($options->getOwnerUserId());
        }
        // query params
        if ($options->getPageNumber() !== null) {
            $queryParams['page_number'] = $this->apiClient->getSerializer()->toQueryValue($options->getPageNumber());
        }
        // query params
        if ($options->getStatus() !== null) {
            $queryParams['status'] = $this->apiClient->getSerializer()->toQueryValue($options->getStatus());
        }
        // query params
        if ($options->getToDate() !== null) {
            $queryParams['to_date'] = $this->apiClient->getSerializer()->toQueryValue($options->getToDate());
        }
        }

        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace(
                "{" . "accountId" . "}",
                $this->apiClient->getSerializer()->toPathValue($account_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DocuSign\Click\Model\ClickwrapVersionsResponse',
                '/v1/accounts/{accountId}/clickwraps'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DocuSign\Click\Model\ClickwrapVersionsResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Click\Model\ClickwrapVersionsResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Click\Model\ErrorDetails', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getServiceInformation
     *
     * Provides base service and version access information.
     *
     * @throws \DocuSign\Click\Client\ApiException on non-2xx response
     * @return \DocuSign\Click\Model\ServiceInformation
     */
    public function getServiceInformation()
    {
        list($response) = $this->getServiceInformationWithHttpInfo();
        return $response;
    }

    /**
     * Operation getServiceInformationWithHttpInfo
     *
     * Provides base service and version access information.
     *
     * @throws \DocuSign\Click\Client\ApiException on non-2xx response
     * @return array of \DocuSign\Click\Model\ServiceInformation, HTTP status code, HTTP response headers (array of strings)
     */
    public function getServiceInformationWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/service_information";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);


        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DocuSign\Click\Model\ServiceInformation',
                '/service_information'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DocuSign\Click\Model\ServiceInformation', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Click\Model\ServiceInformation', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Click\Model\ErrorDetails', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateClickwrap
     *
     * Updates the clickwrap specified by clickwrapId
     *
    * @param string $account_id 
    * @param string $clickwrap_id 
     * @param \DocuSign\Click\Model\ClickwrapTransferRequest $clickwrap_transfer_request  (optional)
     * @throws \DocuSign\Click\Client\ApiException on non-2xx response
     * @return \DocuSign\Click\Model\ClickwrapVersionSummaryResponse
     */
    public function updateClickwrap($account_id, $clickwrap_id, $clickwrap_transfer_request = null)
    {
        list($response) = $this->updateClickwrapWithHttpInfo($account_id, $clickwrap_id, $clickwrap_transfer_request);
        return $response;
    }

    /**
     * Operation updateClickwrapWithHttpInfo
     *
     * Updates the clickwrap specified by clickwrapId
     *
    * @param string $account_id 
    * @param string $clickwrap_id 
     * @param \DocuSign\Click\Model\ClickwrapTransferRequest $clickwrap_transfer_request  (optional)
     * @throws \DocuSign\Click\Client\ApiException on non-2xx response
     * @return array of \DocuSign\Click\Model\ClickwrapVersionSummaryResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateClickwrapWithHttpInfo($account_id, $clickwrap_id, $clickwrap_transfer_request = null)
    {
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling updateClickwrap');
        }
        // verify the required parameter 'clickwrap_id' is set
        if ($clickwrap_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $clickwrap_id when calling updateClickwrap');
        }
        // parse inputs
        $resourcePath = "/v1/accounts/{accountId}/clickwraps/{clickwrapId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);


        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace(
                "{" . "accountId" . "}",
                $this->apiClient->getSerializer()->toPathValue($account_id),
                $resourcePath
            );
        }
        // path params
        if ($clickwrap_id !== null) {
            $resourcePath = str_replace(
                "{" . "clickwrapId" . "}",
                $this->apiClient->getSerializer()->toPathValue($clickwrap_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($clickwrap_transfer_request)) {
            $_tempBody = $clickwrap_transfer_request;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DocuSign\Click\Model\ClickwrapVersionSummaryResponse',
                '/v1/accounts/{accountId}/clickwraps/{clickwrapId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DocuSign\Click\Model\ClickwrapVersionSummaryResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Click\Model\ClickwrapVersionSummaryResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Click\Model\ErrorDetails', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateClickwrapVersion
     *
     * Updates the clickwrap version specified by versionId
     *
    * @param string $account_id 
    * @param string $clickwrap_id 
    * @param string $version_id 
     * @param \DocuSign\Click\Model\ClickwrapRequest $clickwrap_request  (optional)
     * @throws \DocuSign\Click\Client\ApiException on non-2xx response
     * @return \DocuSign\Click\Model\ClickwrapVersionSummaryResponse
     */
    public function updateClickwrapVersion($account_id, $clickwrap_id, $version_id, $clickwrap_request = null)
    {
        list($response) = $this->updateClickwrapVersionWithHttpInfo($account_id, $clickwrap_id, $version_id, $clickwrap_request);
        return $response;
    }

    /**
     * Operation updateClickwrapVersionWithHttpInfo
     *
     * Updates the clickwrap version specified by versionId
     *
    * @param string $account_id 
    * @param string $clickwrap_id 
    * @param string $version_id 
     * @param \DocuSign\Click\Model\ClickwrapRequest $clickwrap_request  (optional)
     * @throws \DocuSign\Click\Client\ApiException on non-2xx response
     * @return array of \DocuSign\Click\Model\ClickwrapVersionSummaryResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateClickwrapVersionWithHttpInfo($account_id, $clickwrap_id, $version_id, $clickwrap_request = null)
    {
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling updateClickwrapVersion');
        }
        // verify the required parameter 'clickwrap_id' is set
        if ($clickwrap_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $clickwrap_id when calling updateClickwrapVersion');
        }
        // verify the required parameter 'version_id' is set
        if ($version_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $version_id when calling updateClickwrapVersion');
        }
        // parse inputs
        $resourcePath = "/v1/accounts/{accountId}/clickwraps/{clickwrapId}/versions/{versionId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);


        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace(
                "{" . "accountId" . "}",
                $this->apiClient->getSerializer()->toPathValue($account_id),
                $resourcePath
            );
        }
        // path params
        if ($clickwrap_id !== null) {
            $resourcePath = str_replace(
                "{" . "clickwrapId" . "}",
                $this->apiClient->getSerializer()->toPathValue($clickwrap_id),
                $resourcePath
            );
        }
        // path params
        if ($version_id !== null) {
            $resourcePath = str_replace(
                "{" . "versionId" . "}",
                $this->apiClient->getSerializer()->toPathValue($version_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($clickwrap_request)) {
            $_tempBody = $clickwrap_request;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DocuSign\Click\Model\ClickwrapVersionSummaryResponse',
                '/v1/accounts/{accountId}/clickwraps/{clickwrapId}/versions/{versionId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DocuSign\Click\Model\ClickwrapVersionSummaryResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Click\Model\ClickwrapVersionSummaryResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Click\Model\ErrorDetails', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateClickwrapVersionByNumber
     *
     * Updates the clickwrap version specified by versionNumber. Use versionId instead of versionNumber
     *
    * @param string $account_id 
    * @param string $clickwrap_id 
    * @param string $version_number 
     * @param \DocuSign\Click\Model\ClickwrapRequest $clickwrap_request  (optional)
     * @throws \DocuSign\Click\Client\ApiException on non-2xx response
     * @return \DocuSign\Click\Model\ClickwrapVersionSummaryResponse
     */
    public function updateClickwrapVersionByNumber($account_id, $clickwrap_id, $version_number, $clickwrap_request = null)
    {
        list($response) = $this->updateClickwrapVersionByNumberWithHttpInfo($account_id, $clickwrap_id, $version_number, $clickwrap_request);
        return $response;
    }

    /**
     * Operation updateClickwrapVersionByNumberWithHttpInfo
     *
     * Updates the clickwrap version specified by versionNumber. Use versionId instead of versionNumber
     *
    * @param string $account_id 
    * @param string $clickwrap_id 
    * @param string $version_number 
     * @param \DocuSign\Click\Model\ClickwrapRequest $clickwrap_request  (optional)
     * @throws \DocuSign\Click\Client\ApiException on non-2xx response
     * @return array of \DocuSign\Click\Model\ClickwrapVersionSummaryResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateClickwrapVersionByNumberWithHttpInfo($account_id, $clickwrap_id, $version_number, $clickwrap_request = null)
    {
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling updateClickwrapVersionByNumber');
        }
        // verify the required parameter 'clickwrap_id' is set
        if ($clickwrap_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $clickwrap_id when calling updateClickwrapVersionByNumber');
        }
        // verify the required parameter 'version_number' is set
        if ($version_number === null) {
            throw new \InvalidArgumentException('Missing the required parameter $version_number when calling updateClickwrapVersionByNumber');
        }
        // parse inputs
        $resourcePath = "/v1/accounts/{accountId}/clickwraps/{clickwrapId}/versions/{versionNumber}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);


        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace(
                "{" . "accountId" . "}",
                $this->apiClient->getSerializer()->toPathValue($account_id),
                $resourcePath
            );
        }
        // path params
        if ($clickwrap_id !== null) {
            $resourcePath = str_replace(
                "{" . "clickwrapId" . "}",
                $this->apiClient->getSerializer()->toPathValue($clickwrap_id),
                $resourcePath
            );
        }
        // path params
        if ($version_number !== null) {
            $resourcePath = str_replace(
                "{" . "versionNumber" . "}",
                $this->apiClient->getSerializer()->toPathValue($version_number),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($clickwrap_request)) {
            $_tempBody = $clickwrap_request;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DocuSign\Click\Model\ClickwrapVersionSummaryResponse',
                '/v1/accounts/{accountId}/clickwraps/{clickwrapId}/versions/{versionNumber}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DocuSign\Click\Model\ClickwrapVersionSummaryResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Click\Model\ClickwrapVersionSummaryResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Click\Model\ErrorDetails', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
