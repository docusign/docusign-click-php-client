<?php
/**
 * DocumentLinkStyles
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  DocuSign\Click
 * @author   Swagger Codegen team <apihelp@docusign.com>
 * @license  The DocuSign PHP Client SDK is licensed under the MIT License.
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * DocuSign Click API
 *
 * Elastic signing (also known as DocuSign Click)  lets you capture consent to standard agreement terms with a single click: terms and conditions, terms of service, terms of use, privacy policies, and more. The Click API lets you include this customizable elastic template solution in your DocuSign integrations.
 *
 * OpenAPI spec version: v1
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.21
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace DocuSign\Click\Model;

use \ArrayAccess;
use DocuSign\Click\ObjectSerializer;

/**
 * DocumentLinkStyles Class Doc Comment
 *
 * @category    Class
 * @description Control the display of the agreement statement.
 * @package     DocuSign\Click
 * @author      Swagger Codegen team <apihelp@docusign.com>
 * @license     The DocuSign PHP Client SDK is licensed under the MIT License.
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class DocumentLinkStyles implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DocumentLinkStyles';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'focus' => '\DocuSign\Click\Model\DocumentLinkStylesFocus',
        'hover' => '\DocuSign\Click\Model\DocumentLinkStylesFocus',
        'border' => '?string',
        'color' => '?string',
        'font_family' => '?string',
        'font_size' => '?string',
        'font_style' => '?string',
        'font_weight' => 'object',
        'margin' => '?string',
        'padding' => '?string',
        'text_decoration' => '?string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'focus' => null,
        'hover' => null,
        'border' => null,
        'color' => null,
        'font_family' => null,
        'font_size' => null,
        'font_style' => null,
        'font_weight' => null,
        'margin' => null,
        'padding' => null,
        'text_decoration' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'focus' => ':focus',
        'hover' => ':hover',
        'border' => 'border',
        'color' => 'color',
        'font_family' => 'fontFamily',
        'font_size' => 'fontSize',
        'font_style' => 'fontStyle',
        'font_weight' => 'fontWeight',
        'margin' => 'margin',
        'padding' => 'padding',
        'text_decoration' => 'textDecoration'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'focus' => 'setFocus',
        'hover' => 'setHover',
        'border' => 'setBorder',
        'color' => 'setColor',
        'font_family' => 'setFontFamily',
        'font_size' => 'setFontSize',
        'font_style' => 'setFontStyle',
        'font_weight' => 'setFontWeight',
        'margin' => 'setMargin',
        'padding' => 'setPadding',
        'text_decoration' => 'setTextDecoration'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'focus' => 'getFocus',
        'hover' => 'getHover',
        'border' => 'getBorder',
        'color' => 'getColor',
        'font_family' => 'getFontFamily',
        'font_size' => 'getFontSize',
        'font_style' => 'getFontStyle',
        'font_weight' => 'getFontWeight',
        'margin' => 'getMargin',
        'padding' => 'getPadding',
        'text_decoration' => 'getTextDecoration'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['focus'] = isset($data['focus']) ? $data['focus'] : null;
        $this->container['hover'] = isset($data['hover']) ? $data['hover'] : null;
        $this->container['border'] = isset($data['border']) ? $data['border'] : null;
        $this->container['color'] = isset($data['color']) ? $data['color'] : null;
        $this->container['font_family'] = isset($data['font_family']) ? $data['font_family'] : null;
        $this->container['font_size'] = isset($data['font_size']) ? $data['font_size'] : null;
        $this->container['font_style'] = isset($data['font_style']) ? $data['font_style'] : null;
        $this->container['font_weight'] = isset($data['font_weight']) ? $data['font_weight'] : null;
        $this->container['margin'] = isset($data['margin']) ? $data['margin'] : null;
        $this->container['padding'] = isset($data['padding']) ? $data['padding'] : null;
        $this->container['text_decoration'] = isset($data['text_decoration']) ? $data['text_decoration'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets focus
     *
     * @return \DocuSign\Click\Model\DocumentLinkStylesFocus
     */
    public function getFocus()
    {
        return $this->container['focus'];
    }

    /**
     * Sets focus
     *
     * @param \DocuSign\Click\Model\DocumentLinkStylesFocus $focus focus
     *
     * @return $this
     */
    public function setFocus($focus)
    {
        $this->container['focus'] = $focus;

        return $this;
    }

    /**
     * Gets hover
     *
     * @return \DocuSign\Click\Model\DocumentLinkStylesFocus
     */
    public function getHover()
    {
        return $this->container['hover'];
    }

    /**
     * Sets hover
     *
     * @param \DocuSign\Click\Model\DocumentLinkStylesFocus $hover hover
     *
     * @return $this
     */
    public function setHover($hover)
    {
        $this->container['hover'] = $hover;

        return $this;
    }

    /**
     * Gets border
     *
     * @return ?string
     */
    public function getBorder()
    {
        return $this->container['border'];
    }

    /**
     * Sets border
     *
     * @param ?string $border Control the border of the element.
     *
     * @return $this
     */
    public function setBorder($border)
    {
        $this->container['border'] = $border;

        return $this;
    }

    /**
     * Gets color
     *
     * @return ?string
     */
    public function getColor()
    {
        return $this->container['color'];
    }

    /**
     * Sets color
     *
     * @param ?string $color Control the fore-ground color of the element.
     *
     * @return $this
     */
    public function setColor($color)
    {
        $this->container['color'] = $color;

        return $this;
    }

    /**
     * Gets font_family
     *
     * @return ?string
     */
    public function getFontFamily()
    {
        return $this->container['font_family'];
    }

    /**
     * Sets font_family
     *
     * @param ?string $font_family Control the font family of the text.
     *
     * @return $this
     */
    public function setFontFamily($font_family)
    {
        $this->container['font_family'] = $font_family;

        return $this;
    }

    /**
     * Gets font_size
     *
     * @return ?string
     */
    public function getFontSize()
    {
        return $this->container['font_size'];
    }

    /**
     * Sets font_size
     *
     * @param ?string $font_size Control the font size of the text.
     *
     * @return $this
     */
    public function setFontSize($font_size)
    {
        $this->container['font_size'] = $font_size;

        return $this;
    }

    /**
     * Gets font_style
     *
     * @return ?string
     */
    public function getFontStyle()
    {
        return $this->container['font_style'];
    }

    /**
     * Sets font_style
     *
     * @param ?string $font_style Control the font style of the text.
     *
     * @return $this
     */
    public function setFontStyle($font_style)
    {
        $this->container['font_style'] = $font_style;

        return $this;
    }

    /**
     * Gets font_weight
     *
     * @return object
     */
    public function getFontWeight()
    {
        return $this->container['font_weight'];
    }

    /**
     * Sets font_weight
     *
     * @param object $font_weight Control the font weight of the text.
     *
     * @return $this
     */
    public function setFontWeight($font_weight)
    {
        $this->container['font_weight'] = $font_weight;

        return $this;
    }

    /**
     * Gets margin
     *
     * @return ?string
     */
    public function getMargin()
    {
        return $this->container['margin'];
    }

    /**
     * Sets margin
     *
     * @param ?string $margin Control the margin of the element.
     *
     * @return $this
     */
    public function setMargin($margin)
    {
        $this->container['margin'] = $margin;

        return $this;
    }

    /**
     * Gets padding
     *
     * @return ?string
     */
    public function getPadding()
    {
        return $this->container['padding'];
    }

    /**
     * Sets padding
     *
     * @param ?string $padding Control the padding of the element.
     *
     * @return $this
     */
    public function setPadding($padding)
    {
        $this->container['padding'] = $padding;

        return $this;
    }

    /**
     * Gets text_decoration
     *
     * @return ?string
     */
    public function getTextDecoration()
    {
        return $this->container['text_decoration'];
    }

    /**
     * Sets text_decoration
     *
     * @param ?string $text_decoration Control the underline and other styles of the text.
     *
     * @return $this
     */
    public function setTextDecoration($text_decoration)
    {
        $this->container['text_decoration'] = $text_decoration;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

