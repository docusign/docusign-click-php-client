<?php
/**
 * DisplaySettings
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  DocuSign\Click
 * @author   Swagger Codegen team <apihelp@docusign.com>
 * @license  The DocuSign PHP Client SDK is licensed under the MIT License.
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * DocuSign Click API
 *
 * DocuSign Click lets you capture consent to standard agreement terms with a single click: terms and conditions, terms of service, terms of use, privacy policies, and more. The Click API lets you include this customizable clickwrap solution in your DocuSign integrations.
 *
 * OpenAPI spec version: v1
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.21-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace DocuSign\Click\Model;

use \ArrayAccess;
use DocuSign\Click\ObjectSerializer;

/**
 * DisplaySettings Class Doc Comment
 *
 * @category    Class
 * @package     DocuSign\Click
 * @author      Swagger Codegen team <apihelp@docusign.com>
 * @license     The DocuSign PHP Client SDK is licensed under the MIT License.
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class DisplaySettings implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'displaySettings';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'action_button_alignment' => '?string',
        'allow_client_only' => '?bool',
        'allowed_hosts' => '?string[]',
        'brand_id' => '?string',
        'consent_button_text' => '?string',
        'consent_text' => '?string',
        'decline_button_text' => '?string',
        'display_name' => '?string',
        'document_display' => '?string',
        'downloadable' => '?bool',
        'format' => '?string',
        'has_decline_button' => '?bool',
        'must_read' => '?bool',
        'must_view' => '?bool',
        'record_decline_responses' => '?bool',
        'require_accept' => '?bool',
        'send_to_email' => '?bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'action_button_alignment' => null,
        'allow_client_only' => null,
        'allowed_hosts' => null,
        'brand_id' => null,
        'consent_button_text' => null,
        'consent_text' => null,
        'decline_button_text' => null,
        'display_name' => null,
        'document_display' => null,
        'downloadable' => null,
        'format' => null,
        'has_decline_button' => null,
        'must_read' => null,
        'must_view' => null,
        'record_decline_responses' => null,
        'require_accept' => null,
        'send_to_email' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'action_button_alignment' => 'actionButtonAlignment',
        'allow_client_only' => 'allowClientOnly',
        'allowed_hosts' => 'allowedHosts',
        'brand_id' => 'brandId',
        'consent_button_text' => 'consentButtonText',
        'consent_text' => 'consentText',
        'decline_button_text' => 'declineButtonText',
        'display_name' => 'displayName',
        'document_display' => 'documentDisplay',
        'downloadable' => 'downloadable',
        'format' => 'format',
        'has_decline_button' => 'hasDeclineButton',
        'must_read' => 'mustRead',
        'must_view' => 'mustView',
        'record_decline_responses' => 'recordDeclineResponses',
        'require_accept' => 'requireAccept',
        'send_to_email' => 'sendToEmail'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'action_button_alignment' => 'setActionButtonAlignment',
        'allow_client_only' => 'setAllowClientOnly',
        'allowed_hosts' => 'setAllowedHosts',
        'brand_id' => 'setBrandId',
        'consent_button_text' => 'setConsentButtonText',
        'consent_text' => 'setConsentText',
        'decline_button_text' => 'setDeclineButtonText',
        'display_name' => 'setDisplayName',
        'document_display' => 'setDocumentDisplay',
        'downloadable' => 'setDownloadable',
        'format' => 'setFormat',
        'has_decline_button' => 'setHasDeclineButton',
        'must_read' => 'setMustRead',
        'must_view' => 'setMustView',
        'record_decline_responses' => 'setRecordDeclineResponses',
        'require_accept' => 'setRequireAccept',
        'send_to_email' => 'setSendToEmail'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'action_button_alignment' => 'getActionButtonAlignment',
        'allow_client_only' => 'getAllowClientOnly',
        'allowed_hosts' => 'getAllowedHosts',
        'brand_id' => 'getBrandId',
        'consent_button_text' => 'getConsentButtonText',
        'consent_text' => 'getConsentText',
        'decline_button_text' => 'getDeclineButtonText',
        'display_name' => 'getDisplayName',
        'document_display' => 'getDocumentDisplay',
        'downloadable' => 'getDownloadable',
        'format' => 'getFormat',
        'has_decline_button' => 'getHasDeclineButton',
        'must_read' => 'getMustRead',
        'must_view' => 'getMustView',
        'record_decline_responses' => 'getRecordDeclineResponses',
        'require_accept' => 'getRequireAccept',
        'send_to_email' => 'getSendToEmail'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['action_button_alignment'] = isset($data['action_button_alignment']) ? $data['action_button_alignment'] : null;
        $this->container['allow_client_only'] = isset($data['allow_client_only']) ? $data['allow_client_only'] : null;
        $this->container['allowed_hosts'] = isset($data['allowed_hosts']) ? $data['allowed_hosts'] : null;
        $this->container['brand_id'] = isset($data['brand_id']) ? $data['brand_id'] : null;
        $this->container['consent_button_text'] = isset($data['consent_button_text']) ? $data['consent_button_text'] : null;
        $this->container['consent_text'] = isset($data['consent_text']) ? $data['consent_text'] : null;
        $this->container['decline_button_text'] = isset($data['decline_button_text']) ? $data['decline_button_text'] : null;
        $this->container['display_name'] = isset($data['display_name']) ? $data['display_name'] : null;
        $this->container['document_display'] = isset($data['document_display']) ? $data['document_display'] : null;
        $this->container['downloadable'] = isset($data['downloadable']) ? $data['downloadable'] : null;
        $this->container['format'] = isset($data['format']) ? $data['format'] : null;
        $this->container['has_decline_button'] = isset($data['has_decline_button']) ? $data['has_decline_button'] : null;
        $this->container['must_read'] = isset($data['must_read']) ? $data['must_read'] : null;
        $this->container['must_view'] = isset($data['must_view']) ? $data['must_view'] : null;
        $this->container['record_decline_responses'] = isset($data['record_decline_responses']) ? $data['record_decline_responses'] : null;
        $this->container['require_accept'] = isset($data['require_accept']) ? $data['require_accept'] : null;
        $this->container['send_to_email'] = isset($data['send_to_email']) ? $data['send_to_email'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets action_button_alignment
     *
     * @return ?string
     */
    public function getActionButtonAlignment()
    {
        return $this->container['action_button_alignment'];
    }

    /**
     * Sets action_button_alignment
     *
     * @param ?string $action_button_alignment 
     *
     * @return $this
     */
    public function setActionButtonAlignment($action_button_alignment)
    {
        $this->container['action_button_alignment'] = $action_button_alignment;

        return $this;
    }

    /**
     * Gets allow_client_only
     *
     * @return ?bool
     */
    public function getAllowClientOnly()
    {
        return $this->container['allow_client_only'];
    }

    /**
     * Sets allow_client_only
     *
     * @param ?bool $allow_client_only 
     *
     * @return $this
     */
    public function setAllowClientOnly($allow_client_only)
    {
        $this->container['allow_client_only'] = $allow_client_only;

        return $this;
    }

    /**
     * Gets allowed_hosts
     *
     * @return ?string[]
     */
    public function getAllowedHosts()
    {
        return $this->container['allowed_hosts'];
    }

    /**
     * Sets allowed_hosts
     *
     * @param ?string[] $allowed_hosts 
     *
     * @return $this
     */
    public function setAllowedHosts($allowed_hosts)
    {
        $this->container['allowed_hosts'] = $allowed_hosts;

        return $this;
    }

    /**
     * Gets brand_id
     *
     * @return ?string
     */
    public function getBrandId()
    {
        return $this->container['brand_id'];
    }

    /**
     * Sets brand_id
     *
     * @param ?string $brand_id 
     *
     * @return $this
     */
    public function setBrandId($brand_id)
    {
        $this->container['brand_id'] = $brand_id;

        return $this;
    }

    /**
     * Gets consent_button_text
     *
     * @return ?string
     */
    public function getConsentButtonText()
    {
        return $this->container['consent_button_text'];
    }

    /**
     * Sets consent_button_text
     *
     * @param ?string $consent_button_text 
     *
     * @return $this
     */
    public function setConsentButtonText($consent_button_text)
    {
        $this->container['consent_button_text'] = $consent_button_text;

        return $this;
    }

    /**
     * Gets consent_text
     *
     * @return ?string
     */
    public function getConsentText()
    {
        return $this->container['consent_text'];
    }

    /**
     * Sets consent_text
     *
     * @param ?string $consent_text 
     *
     * @return $this
     */
    public function setConsentText($consent_text)
    {
        $this->container['consent_text'] = $consent_text;

        return $this;
    }

    /**
     * Gets decline_button_text
     *
     * @return ?string
     */
    public function getDeclineButtonText()
    {
        return $this->container['decline_button_text'];
    }

    /**
     * Sets decline_button_text
     *
     * @param ?string $decline_button_text 
     *
     * @return $this
     */
    public function setDeclineButtonText($decline_button_text)
    {
        $this->container['decline_button_text'] = $decline_button_text;

        return $this;
    }

    /**
     * Gets display_name
     *
     * @return ?string
     */
    public function getDisplayName()
    {
        return $this->container['display_name'];
    }

    /**
     * Sets display_name
     *
     * @param ?string $display_name 
     *
     * @return $this
     */
    public function setDisplayName($display_name)
    {
        $this->container['display_name'] = $display_name;

        return $this;
    }

    /**
     * Gets document_display
     *
     * @return ?string
     */
    public function getDocumentDisplay()
    {
        return $this->container['document_display'];
    }

    /**
     * Sets document_display
     *
     * @param ?string $document_display 
     *
     * @return $this
     */
    public function setDocumentDisplay($document_display)
    {
        $this->container['document_display'] = $document_display;

        return $this;
    }

    /**
     * Gets downloadable
     *
     * @return ?bool
     */
    public function getDownloadable()
    {
        return $this->container['downloadable'];
    }

    /**
     * Sets downloadable
     *
     * @param ?bool $downloadable 
     *
     * @return $this
     */
    public function setDownloadable($downloadable)
    {
        $this->container['downloadable'] = $downloadable;

        return $this;
    }

    /**
     * Gets format
     *
     * @return ?string
     */
    public function getFormat()
    {
        return $this->container['format'];
    }

    /**
     * Sets format
     *
     * @param ?string $format 
     *
     * @return $this
     */
    public function setFormat($format)
    {
        $this->container['format'] = $format;

        return $this;
    }

    /**
     * Gets has_decline_button
     *
     * @return ?bool
     */
    public function getHasDeclineButton()
    {
        return $this->container['has_decline_button'];
    }

    /**
     * Sets has_decline_button
     *
     * @param ?bool $has_decline_button 
     *
     * @return $this
     */
    public function setHasDeclineButton($has_decline_button)
    {
        $this->container['has_decline_button'] = $has_decline_button;

        return $this;
    }

    /**
     * Gets must_read
     *
     * @return ?bool
     */
    public function getMustRead()
    {
        return $this->container['must_read'];
    }

    /**
     * Sets must_read
     *
     * @param ?bool $must_read 
     *
     * @return $this
     */
    public function setMustRead($must_read)
    {
        $this->container['must_read'] = $must_read;

        return $this;
    }

    /**
     * Gets must_view
     *
     * @return ?bool
     */
    public function getMustView()
    {
        return $this->container['must_view'];
    }

    /**
     * Sets must_view
     *
     * @param ?bool $must_view 
     *
     * @return $this
     */
    public function setMustView($must_view)
    {
        $this->container['must_view'] = $must_view;

        return $this;
    }

    /**
     * Gets record_decline_responses
     *
     * @return ?bool
     */
    public function getRecordDeclineResponses()
    {
        return $this->container['record_decline_responses'];
    }

    /**
     * Sets record_decline_responses
     *
     * @param ?bool $record_decline_responses 
     *
     * @return $this
     */
    public function setRecordDeclineResponses($record_decline_responses)
    {
        $this->container['record_decline_responses'] = $record_decline_responses;

        return $this;
    }

    /**
     * Gets require_accept
     *
     * @return ?bool
     */
    public function getRequireAccept()
    {
        return $this->container['require_accept'];
    }

    /**
     * Sets require_accept
     *
     * @param ?bool $require_accept 
     *
     * @return $this
     */
    public function setRequireAccept($require_accept)
    {
        $this->container['require_accept'] = $require_accept;

        return $this;
    }

    /**
     * Gets send_to_email
     *
     * @return ?bool
     */
    public function getSendToEmail()
    {
        return $this->container['send_to_email'];
    }

    /**
     * Sets send_to_email
     *
     * @param ?bool $send_to_email 
     *
     * @return $this
     */
    public function setSendToEmail($send_to_email)
    {
        $this->container['send_to_email'] = $send_to_email;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

