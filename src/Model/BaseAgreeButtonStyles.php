<?php
/**
 * BaseAgreeButtonStyles
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  DocuSign\Click
 * @author   Swagger Codegen team <apihelp@docusign.com>
 * @license  The DocuSign PHP Client SDK is licensed under the MIT License.
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * DocuSign Click API
 *
 * Elastic signing (also known as DocuSign Click)  lets you capture consent to standard agreement terms with a single click: terms and conditions, terms of service, terms of use, privacy policies, and more. The Click API lets you include this customizable elastic template solution in your DocuSign integrations.
 *
 * OpenAPI spec version: v1
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.21-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace DocuSign\Click\Model;

use \ArrayAccess;
use DocuSign\Click\ObjectSerializer;

/**
 * BaseAgreeButtonStyles Class Doc Comment
 *
 * @category    Class
 * @package     DocuSign\Click
 * @author      Swagger Codegen team <apihelp@docusign.com>
 * @license     The DocuSign PHP Client SDK is licensed under the MIT License.
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class BaseAgreeButtonStyles implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'BaseAgreeButtonStyles';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'background_color' => '?string',
        'border' => '?string',
        'border_color' => '?string',
        'border_radius' => '?string',
        'border_style' => '?string',
        'border_width' => '?string',
        'box_shadow' => '?string',
        'color' => '?string',
        'font_family' => '?string',
        'font_size' => '?string',
        'font_style' => '?string',
        'font_weight' => 'object',
        'height' => '?string',
        'margin' => '?string',
        'opacity' => '?string',
        'outline' => '?string',
        'outline_offset' => '?string',
        'padding' => '?string',
        'width' => '?string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'background_color' => null,
        'border' => null,
        'border_color' => null,
        'border_radius' => null,
        'border_style' => null,
        'border_width' => null,
        'box_shadow' => null,
        'color' => null,
        'font_family' => null,
        'font_size' => null,
        'font_style' => null,
        'font_weight' => null,
        'height' => null,
        'margin' => null,
        'opacity' => null,
        'outline' => null,
        'outline_offset' => null,
        'padding' => null,
        'width' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'background_color' => 'backgroundColor',
        'border' => 'border',
        'border_color' => 'borderColor',
        'border_radius' => 'borderRadius',
        'border_style' => 'borderStyle',
        'border_width' => 'borderWidth',
        'box_shadow' => 'boxShadow',
        'color' => 'color',
        'font_family' => 'fontFamily',
        'font_size' => 'fontSize',
        'font_style' => 'fontStyle',
        'font_weight' => 'fontWeight',
        'height' => 'height',
        'margin' => 'margin',
        'opacity' => 'opacity',
        'outline' => 'outline',
        'outline_offset' => 'outlineOffset',
        'padding' => 'padding',
        'width' => 'width'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'background_color' => 'setBackgroundColor',
        'border' => 'setBorder',
        'border_color' => 'setBorderColor',
        'border_radius' => 'setBorderRadius',
        'border_style' => 'setBorderStyle',
        'border_width' => 'setBorderWidth',
        'box_shadow' => 'setBoxShadow',
        'color' => 'setColor',
        'font_family' => 'setFontFamily',
        'font_size' => 'setFontSize',
        'font_style' => 'setFontStyle',
        'font_weight' => 'setFontWeight',
        'height' => 'setHeight',
        'margin' => 'setMargin',
        'opacity' => 'setOpacity',
        'outline' => 'setOutline',
        'outline_offset' => 'setOutlineOffset',
        'padding' => 'setPadding',
        'width' => 'setWidth'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'background_color' => 'getBackgroundColor',
        'border' => 'getBorder',
        'border_color' => 'getBorderColor',
        'border_radius' => 'getBorderRadius',
        'border_style' => 'getBorderStyle',
        'border_width' => 'getBorderWidth',
        'box_shadow' => 'getBoxShadow',
        'color' => 'getColor',
        'font_family' => 'getFontFamily',
        'font_size' => 'getFontSize',
        'font_style' => 'getFontStyle',
        'font_weight' => 'getFontWeight',
        'height' => 'getHeight',
        'margin' => 'getMargin',
        'opacity' => 'getOpacity',
        'outline' => 'getOutline',
        'outline_offset' => 'getOutlineOffset',
        'padding' => 'getPadding',
        'width' => 'getWidth'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['background_color'] = isset($data['background_color']) ? $data['background_color'] : null;
        $this->container['border'] = isset($data['border']) ? $data['border'] : null;
        $this->container['border_color'] = isset($data['border_color']) ? $data['border_color'] : null;
        $this->container['border_radius'] = isset($data['border_radius']) ? $data['border_radius'] : null;
        $this->container['border_style'] = isset($data['border_style']) ? $data['border_style'] : null;
        $this->container['border_width'] = isset($data['border_width']) ? $data['border_width'] : null;
        $this->container['box_shadow'] = isset($data['box_shadow']) ? $data['box_shadow'] : null;
        $this->container['color'] = isset($data['color']) ? $data['color'] : null;
        $this->container['font_family'] = isset($data['font_family']) ? $data['font_family'] : null;
        $this->container['font_size'] = isset($data['font_size']) ? $data['font_size'] : null;
        $this->container['font_style'] = isset($data['font_style']) ? $data['font_style'] : null;
        $this->container['font_weight'] = isset($data['font_weight']) ? $data['font_weight'] : null;
        $this->container['height'] = isset($data['height']) ? $data['height'] : null;
        $this->container['margin'] = isset($data['margin']) ? $data['margin'] : null;
        $this->container['opacity'] = isset($data['opacity']) ? $data['opacity'] : null;
        $this->container['outline'] = isset($data['outline']) ? $data['outline'] : null;
        $this->container['outline_offset'] = isset($data['outline_offset']) ? $data['outline_offset'] : null;
        $this->container['padding'] = isset($data['padding']) ? $data['padding'] : null;
        $this->container['width'] = isset($data['width']) ? $data['width'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets background_color
     *
     * @return ?string
     */
    public function getBackgroundColor()
    {
        return $this->container['background_color'];
    }

    /**
     * Sets background_color
     *
     * @param ?string $background_color Control the background color of the element.
     *
     * @return $this
     */
    public function setBackgroundColor($background_color)
    {
        $this->container['background_color'] = $background_color;

        return $this;
    }

    /**
     * Gets border
     *
     * @return ?string
     */
    public function getBorder()
    {
        return $this->container['border'];
    }

    /**
     * Sets border
     *
     * @param ?string $border Control the border of the element.
     *
     * @return $this
     */
    public function setBorder($border)
    {
        $this->container['border'] = $border;

        return $this;
    }

    /**
     * Gets border_color
     *
     * @return ?string
     */
    public function getBorderColor()
    {
        return $this->container['border_color'];
    }

    /**
     * Sets border_color
     *
     * @param ?string $border_color Control the border color of the element.
     *
     * @return $this
     */
    public function setBorderColor($border_color)
    {
        $this->container['border_color'] = $border_color;

        return $this;
    }

    /**
     * Gets border_radius
     *
     * @return ?string
     */
    public function getBorderRadius()
    {
        return $this->container['border_radius'];
    }

    /**
     * Sets border_radius
     *
     * @param ?string $border_radius Control the border radius of the element.
     *
     * @return $this
     */
    public function setBorderRadius($border_radius)
    {
        $this->container['border_radius'] = $border_radius;

        return $this;
    }

    /**
     * Gets border_style
     *
     * @return ?string
     */
    public function getBorderStyle()
    {
        return $this->container['border_style'];
    }

    /**
     * Sets border_style
     *
     * @param ?string $border_style Control the border style of the element.
     *
     * @return $this
     */
    public function setBorderStyle($border_style)
    {
        $this->container['border_style'] = $border_style;

        return $this;
    }

    /**
     * Gets border_width
     *
     * @return ?string
     */
    public function getBorderWidth()
    {
        return $this->container['border_width'];
    }

    /**
     * Sets border_width
     *
     * @param ?string $border_width Control the border width of the element.
     *
     * @return $this
     */
    public function setBorderWidth($border_width)
    {
        $this->container['border_width'] = $border_width;

        return $this;
    }

    /**
     * Gets box_shadow
     *
     * @return ?string
     */
    public function getBoxShadow()
    {
        return $this->container['box_shadow'];
    }

    /**
     * Sets box_shadow
     *
     * @param ?string $box_shadow Control the display of the box shadow of the agree button.
     *
     * @return $this
     */
    public function setBoxShadow($box_shadow)
    {
        $this->container['box_shadow'] = $box_shadow;

        return $this;
    }

    /**
     * Gets color
     *
     * @return ?string
     */
    public function getColor()
    {
        return $this->container['color'];
    }

    /**
     * Sets color
     *
     * @param ?string $color Control the fore-ground color of the element.
     *
     * @return $this
     */
    public function setColor($color)
    {
        $this->container['color'] = $color;

        return $this;
    }

    /**
     * Gets font_family
     *
     * @return ?string
     */
    public function getFontFamily()
    {
        return $this->container['font_family'];
    }

    /**
     * Sets font_family
     *
     * @param ?string $font_family Control the font family of the text.
     *
     * @return $this
     */
    public function setFontFamily($font_family)
    {
        $this->container['font_family'] = $font_family;

        return $this;
    }

    /**
     * Gets font_size
     *
     * @return ?string
     */
    public function getFontSize()
    {
        return $this->container['font_size'];
    }

    /**
     * Sets font_size
     *
     * @param ?string $font_size Control the font size of the text.
     *
     * @return $this
     */
    public function setFontSize($font_size)
    {
        $this->container['font_size'] = $font_size;

        return $this;
    }

    /**
     * Gets font_style
     *
     * @return ?string
     */
    public function getFontStyle()
    {
        return $this->container['font_style'];
    }

    /**
     * Sets font_style
     *
     * @param ?string $font_style Control the font style of the text.
     *
     * @return $this
     */
    public function setFontStyle($font_style)
    {
        $this->container['font_style'] = $font_style;

        return $this;
    }

    /**
     * Gets font_weight
     *
     * @return object
     */
    public function getFontWeight()
    {
        return $this->container['font_weight'];
    }

    /**
     * Sets font_weight
     *
     * @param object $font_weight Control the font weight of the text.
     *
     * @return $this
     */
    public function setFontWeight($font_weight)
    {
        $this->container['font_weight'] = $font_weight;

        return $this;
    }

    /**
     * Gets height
     *
     * @return ?string
     */
    public function getHeight()
    {
        return $this->container['height'];
    }

    /**
     * Sets height
     *
     * @param ?string $height Control the height of the agree button.
     *
     * @return $this
     */
    public function setHeight($height)
    {
        $this->container['height'] = $height;

        return $this;
    }

    /**
     * Gets margin
     *
     * @return ?string
     */
    public function getMargin()
    {
        return $this->container['margin'];
    }

    /**
     * Sets margin
     *
     * @param ?string $margin Control the margin of the element.
     *
     * @return $this
     */
    public function setMargin($margin)
    {
        $this->container['margin'] = $margin;

        return $this;
    }

    /**
     * Gets opacity
     *
     * @return ?string
     */
    public function getOpacity()
    {
        return $this->container['opacity'];
    }

    /**
     * Sets opacity
     *
     * @param ?string $opacity Control the opacity of the element
     *
     * @return $this
     */
    public function setOpacity($opacity)
    {
        $this->container['opacity'] = $opacity;

        return $this;
    }

    /**
     * Gets outline
     *
     * @return ?string
     */
    public function getOutline()
    {
        return $this->container['outline'];
    }

    /**
     * Sets outline
     *
     * @param ?string $outline Control the outline of the element
     *
     * @return $this
     */
    public function setOutline($outline)
    {
        $this->container['outline'] = $outline;

        return $this;
    }

    /**
     * Gets outline_offset
     *
     * @return ?string
     */
    public function getOutlineOffset()
    {
        return $this->container['outline_offset'];
    }

    /**
     * Sets outline_offset
     *
     * @param ?string $outline_offset Conrol the outline offset of the element
     *
     * @return $this
     */
    public function setOutlineOffset($outline_offset)
    {
        $this->container['outline_offset'] = $outline_offset;

        return $this;
    }

    /**
     * Gets padding
     *
     * @return ?string
     */
    public function getPadding()
    {
        return $this->container['padding'];
    }

    /**
     * Sets padding
     *
     * @param ?string $padding Control the padding of the element.
     *
     * @return $this
     */
    public function setPadding($padding)
    {
        $this->container['padding'] = $padding;

        return $this;
    }

    /**
     * Gets width
     *
     * @return ?string
     */
    public function getWidth()
    {
        return $this->container['width'];
    }

    /**
     * Sets width
     *
     * @param ?string $width Control the width of the agree button.
     *
     * @return $this
     */
    public function setWidth($width)
    {
        $this->container['width'] = $width;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

