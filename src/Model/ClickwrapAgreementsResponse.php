<?php
/**
 * ClickwrapAgreementsResponse
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  DocuSign\Click
 * @author   Swagger Codegen team <apihelp@docusign.com>
 * @license  The DocuSign PHP Client SDK is licensed under the MIT License.
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * DocuSign Click API
 *
 * DocuSign Click lets you capture consent to standard agreement terms with a single click: terms and conditions, terms of service, terms of use, privacy policies, and more. The Click API lets you include this customizable clickwrap solution in your DocuSign integrations.
 *
 * OpenAPI spec version: v1
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.21-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace DocuSign\Click\Model;

use \ArrayAccess;
use DocuSign\Click\ObjectSerializer;

/**
 * ClickwrapAgreementsResponse Class Doc Comment
 *
 * @category    Class
 * @package     DocuSign\Click
 * @author      Swagger Codegen team <apihelp@docusign.com>
 * @license     The DocuSign PHP Client SDK is licensed under the MIT License.
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class ClickwrapAgreementsResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'clickwrapAgreementsResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'begin_created_on' => 'object',
        'minimum_pages_remaining' => '?int',
        'page' => '?int',
        'page_size' => '?int',
        'user_agreements' => '\DocuSign\Click\Model\UserAgreementResponse[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'begin_created_on' => null,
        'minimum_pages_remaining' => 'int32',
        'page' => 'int32',
        'page_size' => 'int32',
        'user_agreements' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'begin_created_on' => 'beginCreatedOn',
        'minimum_pages_remaining' => 'minimumPagesRemaining',
        'page' => 'page',
        'page_size' => 'pageSize',
        'user_agreements' => 'userAgreements'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'begin_created_on' => 'setBeginCreatedOn',
        'minimum_pages_remaining' => 'setMinimumPagesRemaining',
        'page' => 'setPage',
        'page_size' => 'setPageSize',
        'user_agreements' => 'setUserAgreements'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'begin_created_on' => 'getBeginCreatedOn',
        'minimum_pages_remaining' => 'getMinimumPagesRemaining',
        'page' => 'getPage',
        'page_size' => 'getPageSize',
        'user_agreements' => 'getUserAgreements'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['begin_created_on'] = isset($data['begin_created_on']) ? $data['begin_created_on'] : null;
        $this->container['minimum_pages_remaining'] = isset($data['minimum_pages_remaining']) ? $data['minimum_pages_remaining'] : null;
        $this->container['page'] = isset($data['page']) ? $data['page'] : null;
        $this->container['page_size'] = isset($data['page_size']) ? $data['page_size'] : null;
        $this->container['user_agreements'] = isset($data['user_agreements']) ? $data['user_agreements'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets begin_created_on
     *
     * @return object
     */
    public function getBeginCreatedOn()
    {
        return $this->container['begin_created_on'];
    }

    /**
     * Sets begin_created_on
     *
     * @param object $begin_created_on 
     *
     * @return $this
     */
    public function setBeginCreatedOn($begin_created_on)
    {
        $this->container['begin_created_on'] = $begin_created_on;

        return $this;
    }

    /**
     * Gets minimum_pages_remaining
     *
     * @return ?int
     */
    public function getMinimumPagesRemaining()
    {
        return $this->container['minimum_pages_remaining'];
    }

    /**
     * Sets minimum_pages_remaining
     *
     * @param ?int $minimum_pages_remaining 
     *
     * @return $this
     */
    public function setMinimumPagesRemaining($minimum_pages_remaining)
    {
        $this->container['minimum_pages_remaining'] = $minimum_pages_remaining;

        return $this;
    }

    /**
     * Gets page
     *
     * @return ?int
     */
    public function getPage()
    {
        return $this->container['page'];
    }

    /**
     * Sets page
     *
     * @param ?int $page 
     *
     * @return $this
     */
    public function setPage($page)
    {
        $this->container['page'] = $page;

        return $this;
    }

    /**
     * Gets page_size
     *
     * @return ?int
     */
    public function getPageSize()
    {
        return $this->container['page_size'];
    }

    /**
     * Sets page_size
     *
     * @param ?int $page_size 
     *
     * @return $this
     */
    public function setPageSize($page_size)
    {
        $this->container['page_size'] = $page_size;

        return $this;
    }

    /**
     * Gets user_agreements
     *
     * @return \DocuSign\Click\Model\UserAgreementResponse[]
     */
    public function getUserAgreements()
    {
        return $this->container['user_agreements'];
    }

    /**
     * Sets user_agreements
     *
     * @param \DocuSign\Click\Model\UserAgreementResponse[] $user_agreements 
     *
     * @return $this
     */
    public function setUserAgreements($user_agreements)
    {
        $this->container['user_agreements'] = $user_agreements;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

