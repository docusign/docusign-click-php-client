<?php
/**
 * Document
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  DocuSign\Click
 * @author   Swagger Codegen team <apihelp@docusign.com>
 * @license  The DocuSign PHP Client SDK is licensed under the MIT License.
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * DocuSign Click API
 *
 * Elastic signing (also known as DocuSign Click)  lets you capture consent to standard agreement terms with a single click: terms and conditions, terms of service, terms of use, privacy policies, and more. The Click API lets you include this customizable elastic template solution in your DocuSign integrations.
 *
 * OpenAPI spec version: v1
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.21-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace DocuSign\Click\Model;

use \ArrayAccess;
use DocuSign\Click\ObjectSerializer;

/**
 * Document Class Doc Comment
 *
 * @category    Class
 * @description Information about a document.
 * @package     DocuSign\Click
 * @author      Swagger Codegen team <apihelp@docusign.com>
 * @license     The DocuSign PHP Client SDK is licensed under the MIT License.
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Document implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'document';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'document_base64' => '?string',
        'document_display' => '?string',
        'document_html' => '?string',
        'document_name' => '?string',
        'file_extension' => '?string',
        'must_read' => '?bool',
        'must_view' => '?bool',
        'order' => '?int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'document_base64' => null,
        'document_display' => null,
        'document_html' => null,
        'document_name' => null,
        'file_extension' => null,
        'must_read' => null,
        'must_view' => null,
        'order' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'document_base64' => 'documentBase64',
        'document_display' => 'documentDisplay',
        'document_html' => 'documentHtml',
        'document_name' => 'documentName',
        'file_extension' => 'fileExtension',
        'must_read' => 'mustRead',
        'must_view' => 'mustView',
        'order' => 'order'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'document_base64' => 'setDocumentBase64',
        'document_display' => 'setDocumentDisplay',
        'document_html' => 'setDocumentHtml',
        'document_name' => 'setDocumentName',
        'file_extension' => 'setFileExtension',
        'must_read' => 'setMustRead',
        'must_view' => 'setMustView',
        'order' => 'setOrder'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'document_base64' => 'getDocumentBase64',
        'document_display' => 'getDocumentDisplay',
        'document_html' => 'getDocumentHtml',
        'document_name' => 'getDocumentName',
        'file_extension' => 'getFileExtension',
        'must_read' => 'getMustRead',
        'must_view' => 'getMustView',
        'order' => 'getOrder'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['document_base64'] = isset($data['document_base64']) ? $data['document_base64'] : null;
        $this->container['document_display'] = isset($data['document_display']) ? $data['document_display'] : null;
        $this->container['document_html'] = isset($data['document_html']) ? $data['document_html'] : null;
        $this->container['document_name'] = isset($data['document_name']) ? $data['document_name'] : null;
        $this->container['file_extension'] = isset($data['file_extension']) ? $data['file_extension'] : null;
        $this->container['must_read'] = isset($data['must_read']) ? $data['must_read'] : null;
        $this->container['must_view'] = isset($data['must_view']) ? $data['must_view'] : null;
        $this->container['order'] = isset($data['order']) ? $data['order'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets document_base64
     *
     * @return ?string
     */
    public function getDocumentBase64()
    {
        return $this->container['document_base64'];
    }

    /**
     * Sets document_base64
     *
     * @param ?string $document_base64 The base64-encoded contents of the document.
     *
     * @return $this
     */
    public function setDocumentBase64($document_base64)
    {
        $this->container['document_base64'] = $document_base64;

        return $this;
    }

    /**
     * Gets document_display
     *
     * @return ?string
     */
    public function getDocumentDisplay()
    {
        return $this->container['document_display'];
    }

    /**
     * Sets document_display
     *
     * @param ?string $document_display Display type: link, document or pdf
     *
     * @return $this
     */
    public function setDocumentDisplay($document_display)
    {
        $this->container['document_display'] = $document_display;

        return $this;
    }

    /**
     * Gets document_html
     *
     * @return ?string
     */
    public function getDocumentHtml()
    {
        return $this->container['document_html'];
    }

    /**
     * Sets document_html
     *
     * @param ?string $document_html The HTML representation of the document.
     *
     * @return $this
     */
    public function setDocumentHtml($document_html)
    {
        $this->container['document_html'] = $document_html;

        return $this;
    }

    /**
     * Gets document_name
     *
     * @return ?string
     */
    public function getDocumentName()
    {
        return $this->container['document_name'];
    }

    /**
     * Sets document_name
     *
     * @param ?string $document_name The name of the document.
     *
     * @return $this
     */
    public function setDocumentName($document_name)
    {
        $this->container['document_name'] = $document_name;

        return $this;
    }

    /**
     * Gets file_extension
     *
     * @return ?string
     */
    public function getFileExtension()
    {
        return $this->container['file_extension'];
    }

    /**
     * Sets file_extension
     *
     * @param ?string $file_extension The file extension of the document.
     *
     * @return $this
     */
    public function setFileExtension($file_extension)
    {
        $this->container['file_extension'] = $file_extension;

        return $this;
    }

    /**
     * Gets must_read
     *
     * @return ?bool
     */
    public function getMustRead()
    {
        return $this->container['must_read'];
    }

    /**
     * Sets must_read
     *
     * @param ?bool $must_read **True** if the user needs to scroll to the end of the document.
     *
     * @return $this
     */
    public function setMustRead($must_read)
    {
        $this->container['must_read'] = $must_read;

        return $this;
    }

    /**
     * Gets must_view
     *
     * @return ?bool
     */
    public function getMustView()
    {
        return $this->container['must_view'];
    }

    /**
     * Sets must_view
     *
     * @param ?bool $must_view **True** if the user must view the document.
     *
     * @return $this
     */
    public function setMustView($must_view)
    {
        $this->container['must_view'] = $must_view;

        return $this;
    }

    /**
     * Gets order
     *
     * @return ?int
     */
    public function getOrder()
    {
        return $this->container['order'];
    }

    /**
     * Sets order
     *
     * @param ?int $order The order of document layout.
     *
     * @return $this
     */
    public function setOrder($order)
    {
        $this->container['order'] = $order;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

