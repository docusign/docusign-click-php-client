<?php
/**
 * UserAgreementResponse
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  DocuSign\Click
 * @author   Swagger Codegen team <apihelp@docusign.com>
 * @license  The DocuSign PHP Client SDK is licensed under the MIT License.
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * DocuSign Click API
 *
 * DocuSign Click lets you capture consent to standard agreement terms with a single click: terms and conditions, terms of service, terms of use, privacy policies, and more. The Click API lets you include this customizable clickwrap solution in your DocuSign integrations.
 *
 * OpenAPI spec version: v1
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.21-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace DocuSign\Click\Model;

use \ArrayAccess;
use DocuSign\Click\ObjectSerializer;

/**
 * UserAgreementResponse Class Doc Comment
 *
 * @category    Class
 * @package     DocuSign\Click
 * @author      Swagger Codegen team <apihelp@docusign.com>
 * @license     The DocuSign PHP Client SDK is licensed under the MIT License.
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class UserAgreementResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'userAgreementResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'account_id' => '?string',
        'agreed_on' => 'object',
        'agreement_id' => '?string',
        'agreement_url' => '?string',
        'clickwrap_id' => '?string',
        'client_user_id' => '?string',
        'consumer_disclosure_html' => '?string',
        'created_on' => 'object',
        'declined_on' => 'object',
        'documents' => '\DocuSign\Click\Model\Document[]',
        'metadata' => '?string',
        'settings' => '\DocuSign\Click\Model\DisplaySettings',
        'status' => '?string',
        'version' => '?string',
        'version_id' => '?string',
        'version_number' => '?int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'account_id' => null,
        'agreed_on' => null,
        'agreement_id' => null,
        'agreement_url' => null,
        'clickwrap_id' => null,
        'client_user_id' => null,
        'consumer_disclosure_html' => null,
        'created_on' => null,
        'declined_on' => null,
        'documents' => null,
        'metadata' => null,
        'settings' => null,
        'status' => null,
        'version' => null,
        'version_id' => null,
        'version_number' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'account_id' => 'accountId',
        'agreed_on' => 'agreedOn',
        'agreement_id' => 'agreementId',
        'agreement_url' => 'agreementUrl',
        'clickwrap_id' => 'clickwrapId',
        'client_user_id' => 'clientUserId',
        'consumer_disclosure_html' => 'consumerDisclosureHtml',
        'created_on' => 'createdOn',
        'declined_on' => 'declinedOn',
        'documents' => 'documents',
        'metadata' => 'metadata',
        'settings' => 'settings',
        'status' => 'status',
        'version' => 'version',
        'version_id' => 'versionId',
        'version_number' => 'versionNumber'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'account_id' => 'setAccountId',
        'agreed_on' => 'setAgreedOn',
        'agreement_id' => 'setAgreementId',
        'agreement_url' => 'setAgreementUrl',
        'clickwrap_id' => 'setClickwrapId',
        'client_user_id' => 'setClientUserId',
        'consumer_disclosure_html' => 'setConsumerDisclosureHtml',
        'created_on' => 'setCreatedOn',
        'declined_on' => 'setDeclinedOn',
        'documents' => 'setDocuments',
        'metadata' => 'setMetadata',
        'settings' => 'setSettings',
        'status' => 'setStatus',
        'version' => 'setVersion',
        'version_id' => 'setVersionId',
        'version_number' => 'setVersionNumber'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'account_id' => 'getAccountId',
        'agreed_on' => 'getAgreedOn',
        'agreement_id' => 'getAgreementId',
        'agreement_url' => 'getAgreementUrl',
        'clickwrap_id' => 'getClickwrapId',
        'client_user_id' => 'getClientUserId',
        'consumer_disclosure_html' => 'getConsumerDisclosureHtml',
        'created_on' => 'getCreatedOn',
        'declined_on' => 'getDeclinedOn',
        'documents' => 'getDocuments',
        'metadata' => 'getMetadata',
        'settings' => 'getSettings',
        'status' => 'getStatus',
        'version' => 'getVersion',
        'version_id' => 'getVersionId',
        'version_number' => 'getVersionNumber'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['account_id'] = isset($data['account_id']) ? $data['account_id'] : null;
        $this->container['agreed_on'] = isset($data['agreed_on']) ? $data['agreed_on'] : null;
        $this->container['agreement_id'] = isset($data['agreement_id']) ? $data['agreement_id'] : null;
        $this->container['agreement_url'] = isset($data['agreement_url']) ? $data['agreement_url'] : null;
        $this->container['clickwrap_id'] = isset($data['clickwrap_id']) ? $data['clickwrap_id'] : null;
        $this->container['client_user_id'] = isset($data['client_user_id']) ? $data['client_user_id'] : null;
        $this->container['consumer_disclosure_html'] = isset($data['consumer_disclosure_html']) ? $data['consumer_disclosure_html'] : null;
        $this->container['created_on'] = isset($data['created_on']) ? $data['created_on'] : null;
        $this->container['declined_on'] = isset($data['declined_on']) ? $data['declined_on'] : null;
        $this->container['documents'] = isset($data['documents']) ? $data['documents'] : null;
        $this->container['metadata'] = isset($data['metadata']) ? $data['metadata'] : null;
        $this->container['settings'] = isset($data['settings']) ? $data['settings'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['version'] = isset($data['version']) ? $data['version'] : null;
        $this->container['version_id'] = isset($data['version_id']) ? $data['version_id'] : null;
        $this->container['version_number'] = isset($data['version_number']) ? $data['version_number'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets account_id
     *
     * @return ?string
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     *
     * @param ?string $account_id 
     *
     * @return $this
     */
    public function setAccountId($account_id)
    {
        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets agreed_on
     *
     * @return object
     */
    public function getAgreedOn()
    {
        return $this->container['agreed_on'];
    }

    /**
     * Sets agreed_on
     *
     * @param object $agreed_on 
     *
     * @return $this
     */
    public function setAgreedOn($agreed_on)
    {
        $this->container['agreed_on'] = $agreed_on;

        return $this;
    }

    /**
     * Gets agreement_id
     *
     * @return ?string
     */
    public function getAgreementId()
    {
        return $this->container['agreement_id'];
    }

    /**
     * Sets agreement_id
     *
     * @param ?string $agreement_id 
     *
     * @return $this
     */
    public function setAgreementId($agreement_id)
    {
        $this->container['agreement_id'] = $agreement_id;

        return $this;
    }

    /**
     * Gets agreement_url
     *
     * @return ?string
     */
    public function getAgreementUrl()
    {
        return $this->container['agreement_url'];
    }

    /**
     * Sets agreement_url
     *
     * @param ?string $agreement_url 
     *
     * @return $this
     */
    public function setAgreementUrl($agreement_url)
    {
        $this->container['agreement_url'] = $agreement_url;

        return $this;
    }

    /**
     * Gets clickwrap_id
     *
     * @return ?string
     */
    public function getClickwrapId()
    {
        return $this->container['clickwrap_id'];
    }

    /**
     * Sets clickwrap_id
     *
     * @param ?string $clickwrap_id 
     *
     * @return $this
     */
    public function setClickwrapId($clickwrap_id)
    {
        $this->container['clickwrap_id'] = $clickwrap_id;

        return $this;
    }

    /**
     * Gets client_user_id
     *
     * @return ?string
     */
    public function getClientUserId()
    {
        return $this->container['client_user_id'];
    }

    /**
     * Sets client_user_id
     *
     * @param ?string $client_user_id 
     *
     * @return $this
     */
    public function setClientUserId($client_user_id)
    {
        $this->container['client_user_id'] = $client_user_id;

        return $this;
    }

    /**
     * Gets consumer_disclosure_html
     *
     * @return ?string
     */
    public function getConsumerDisclosureHtml()
    {
        return $this->container['consumer_disclosure_html'];
    }

    /**
     * Sets consumer_disclosure_html
     *
     * @param ?string $consumer_disclosure_html 
     *
     * @return $this
     */
    public function setConsumerDisclosureHtml($consumer_disclosure_html)
    {
        $this->container['consumer_disclosure_html'] = $consumer_disclosure_html;

        return $this;
    }

    /**
     * Gets created_on
     *
     * @return object
     */
    public function getCreatedOn()
    {
        return $this->container['created_on'];
    }

    /**
     * Sets created_on
     *
     * @param object $created_on 
     *
     * @return $this
     */
    public function setCreatedOn($created_on)
    {
        $this->container['created_on'] = $created_on;

        return $this;
    }

    /**
     * Gets declined_on
     *
     * @return object
     */
    public function getDeclinedOn()
    {
        return $this->container['declined_on'];
    }

    /**
     * Sets declined_on
     *
     * @param object $declined_on 
     *
     * @return $this
     */
    public function setDeclinedOn($declined_on)
    {
        $this->container['declined_on'] = $declined_on;

        return $this;
    }

    /**
     * Gets documents
     *
     * @return \DocuSign\Click\Model\Document[]
     */
    public function getDocuments()
    {
        return $this->container['documents'];
    }

    /**
     * Sets documents
     *
     * @param \DocuSign\Click\Model\Document[] $documents 
     *
     * @return $this
     */
    public function setDocuments($documents)
    {
        $this->container['documents'] = $documents;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return ?string
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param ?string $metadata 
     *
     * @return $this
     */
    public function setMetadata($metadata)
    {
        $this->container['metadata'] = $metadata;

        return $this;
    }

    /**
     * Gets settings
     *
     * @return \DocuSign\Click\Model\DisplaySettings
     */
    public function getSettings()
    {
        return $this->container['settings'];
    }

    /**
     * Sets settings
     *
     * @param \DocuSign\Click\Model\DisplaySettings $settings settings
     *
     * @return $this
     */
    public function setSettings($settings)
    {
        $this->container['settings'] = $settings;

        return $this;
    }

    /**
     * Gets status
     *
     * @return ?string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param ?string $status 
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets version
     *
     * @return ?string
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param ?string $version 
     *
     * @return $this
     */
    public function setVersion($version)
    {
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets version_id
     *
     * @return ?string
     */
    public function getVersionId()
    {
        return $this->container['version_id'];
    }

    /**
     * Sets version_id
     *
     * @param ?string $version_id 
     *
     * @return $this
     */
    public function setVersionId($version_id)
    {
        $this->container['version_id'] = $version_id;

        return $this;
    }

    /**
     * Gets version_number
     *
     * @return ?int
     */
    public function getVersionNumber()
    {
        return $this->container['version_number'];
    }

    /**
     * Sets version_number
     *
     * @param ?int $version_number 
     *
     * @return $this
     */
    public function setVersionNumber($version_number)
    {
        $this->container['version_number'] = $version_number;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

