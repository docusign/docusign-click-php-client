<?php
/**
 * ClickwrapRequest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  DocuSign\Click
 * @author   Swagger Codegen team <apihelp@docusign.com>
 * @license  The DocuSign PHP Client SDK is licensed under the MIT License.
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * DocuSign Click API
 *
 * DocuSign Click lets you capture consent to standard agreement terms with a single click: terms and conditions, terms of service, terms of use, privacy policies, and more. The Click API lets you include this customizable clickwrap solution in your DocuSign integrations.
 *
 * OpenAPI spec version: v1
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.21-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace DocuSign\Click\Model;

use \ArrayAccess;
use DocuSign\Click\ObjectSerializer;

/**
 * ClickwrapRequest Class Doc Comment
 *
 * @category    Class
 * @package     DocuSign\Click
 * @author      Swagger Codegen team <apihelp@docusign.com>
 * @license     The DocuSign PHP Client SDK is licensed under the MIT License.
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class ClickwrapRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'clickwrapRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'clickwrap_name' => '?string',
        'display_settings' => '\DocuSign\Click\Model\DisplaySettings',
        'documents' => '\DocuSign\Click\Model\Document[]',
        'fields_to_null' => '?string',
        'is_major_version' => '?bool',
        'is_shared' => '?bool',
        'name' => '?string',
        'require_reacceptance' => '?bool',
        'scheduled_date' => 'object',
        'scheduled_reacceptance' => '\DocuSign\Click\Model\ClickwrapScheduledReacceptance',
        'status' => 'object',
        'transfer_from_user_id' => '?string',
        'transfer_to_user_id' => '?string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'clickwrap_name' => null,
        'display_settings' => null,
        'documents' => null,
        'fields_to_null' => null,
        'is_major_version' => null,
        'is_shared' => null,
        'name' => null,
        'require_reacceptance' => null,
        'scheduled_date' => null,
        'scheduled_reacceptance' => null,
        'status' => null,
        'transfer_from_user_id' => null,
        'transfer_to_user_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'clickwrap_name' => 'clickwrapName',
        'display_settings' => 'displaySettings',
        'documents' => 'documents',
        'fields_to_null' => 'fieldsToNull',
        'is_major_version' => 'isMajorVersion',
        'is_shared' => 'isShared',
        'name' => 'name',
        'require_reacceptance' => 'requireReacceptance',
        'scheduled_date' => 'scheduledDate',
        'scheduled_reacceptance' => 'scheduledReacceptance',
        'status' => 'status',
        'transfer_from_user_id' => 'transferFromUserId',
        'transfer_to_user_id' => 'transferToUserId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'clickwrap_name' => 'setClickwrapName',
        'display_settings' => 'setDisplaySettings',
        'documents' => 'setDocuments',
        'fields_to_null' => 'setFieldsToNull',
        'is_major_version' => 'setIsMajorVersion',
        'is_shared' => 'setIsShared',
        'name' => 'setName',
        'require_reacceptance' => 'setRequireReacceptance',
        'scheduled_date' => 'setScheduledDate',
        'scheduled_reacceptance' => 'setScheduledReacceptance',
        'status' => 'setStatus',
        'transfer_from_user_id' => 'setTransferFromUserId',
        'transfer_to_user_id' => 'setTransferToUserId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'clickwrap_name' => 'getClickwrapName',
        'display_settings' => 'getDisplaySettings',
        'documents' => 'getDocuments',
        'fields_to_null' => 'getFieldsToNull',
        'is_major_version' => 'getIsMajorVersion',
        'is_shared' => 'getIsShared',
        'name' => 'getName',
        'require_reacceptance' => 'getRequireReacceptance',
        'scheduled_date' => 'getScheduledDate',
        'scheduled_reacceptance' => 'getScheduledReacceptance',
        'status' => 'getStatus',
        'transfer_from_user_id' => 'getTransferFromUserId',
        'transfer_to_user_id' => 'getTransferToUserId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['clickwrap_name'] = isset($data['clickwrap_name']) ? $data['clickwrap_name'] : null;
        $this->container['display_settings'] = isset($data['display_settings']) ? $data['display_settings'] : null;
        $this->container['documents'] = isset($data['documents']) ? $data['documents'] : null;
        $this->container['fields_to_null'] = isset($data['fields_to_null']) ? $data['fields_to_null'] : null;
        $this->container['is_major_version'] = isset($data['is_major_version']) ? $data['is_major_version'] : null;
        $this->container['is_shared'] = isset($data['is_shared']) ? $data['is_shared'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['require_reacceptance'] = isset($data['require_reacceptance']) ? $data['require_reacceptance'] : null;
        $this->container['scheduled_date'] = isset($data['scheduled_date']) ? $data['scheduled_date'] : null;
        $this->container['scheduled_reacceptance'] = isset($data['scheduled_reacceptance']) ? $data['scheduled_reacceptance'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['transfer_from_user_id'] = isset($data['transfer_from_user_id']) ? $data['transfer_from_user_id'] : null;
        $this->container['transfer_to_user_id'] = isset($data['transfer_to_user_id']) ? $data['transfer_to_user_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets clickwrap_name
     *
     * @return ?string
     */
    public function getClickwrapName()
    {
        return $this->container['clickwrap_name'];
    }

    /**
     * Sets clickwrap_name
     *
     * @param ?string $clickwrap_name 
     *
     * @return $this
     */
    public function setClickwrapName($clickwrap_name)
    {
        $this->container['clickwrap_name'] = $clickwrap_name;

        return $this;
    }

    /**
     * Gets display_settings
     *
     * @return \DocuSign\Click\Model\DisplaySettings
     */
    public function getDisplaySettings()
    {
        return $this->container['display_settings'];
    }

    /**
     * Sets display_settings
     *
     * @param \DocuSign\Click\Model\DisplaySettings $display_settings display_settings
     *
     * @return $this
     */
    public function setDisplaySettings($display_settings)
    {
        $this->container['display_settings'] = $display_settings;

        return $this;
    }

    /**
     * Gets documents
     *
     * @return \DocuSign\Click\Model\Document[]
     */
    public function getDocuments()
    {
        return $this->container['documents'];
    }

    /**
     * Sets documents
     *
     * @param \DocuSign\Click\Model\Document[] $documents 
     *
     * @return $this
     */
    public function setDocuments($documents)
    {
        $this->container['documents'] = $documents;

        return $this;
    }

    /**
     * Gets fields_to_null
     *
     * @return ?string
     */
    public function getFieldsToNull()
    {
        return $this->container['fields_to_null'];
    }

    /**
     * Sets fields_to_null
     *
     * @param ?string $fields_to_null 
     *
     * @return $this
     */
    public function setFieldsToNull($fields_to_null)
    {
        $this->container['fields_to_null'] = $fields_to_null;

        return $this;
    }

    /**
     * Gets is_major_version
     *
     * @return ?bool
     */
    public function getIsMajorVersion()
    {
        return $this->container['is_major_version'];
    }

    /**
     * Sets is_major_version
     *
     * @param ?bool $is_major_version 
     *
     * @return $this
     */
    public function setIsMajorVersion($is_major_version)
    {
        $this->container['is_major_version'] = $is_major_version;

        return $this;
    }

    /**
     * Gets is_shared
     *
     * @return ?bool
     */
    public function getIsShared()
    {
        return $this->container['is_shared'];
    }

    /**
     * Sets is_shared
     *
     * @param ?bool $is_shared 
     *
     * @return $this
     */
    public function setIsShared($is_shared)
    {
        $this->container['is_shared'] = $is_shared;

        return $this;
    }

    /**
     * Gets name
     *
     * @return ?string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param ?string $name 
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets require_reacceptance
     *
     * @return ?bool
     */
    public function getRequireReacceptance()
    {
        return $this->container['require_reacceptance'];
    }

    /**
     * Sets require_reacceptance
     *
     * @param ?bool $require_reacceptance 
     *
     * @return $this
     */
    public function setRequireReacceptance($require_reacceptance)
    {
        $this->container['require_reacceptance'] = $require_reacceptance;

        return $this;
    }

    /**
     * Gets scheduled_date
     *
     * @return object
     */
    public function getScheduledDate()
    {
        return $this->container['scheduled_date'];
    }

    /**
     * Sets scheduled_date
     *
     * @param object $scheduled_date 
     *
     * @return $this
     */
    public function setScheduledDate($scheduled_date)
    {
        $this->container['scheduled_date'] = $scheduled_date;

        return $this;
    }

    /**
     * Gets scheduled_reacceptance
     *
     * @return \DocuSign\Click\Model\ClickwrapScheduledReacceptance
     */
    public function getScheduledReacceptance()
    {
        return $this->container['scheduled_reacceptance'];
    }

    /**
     * Sets scheduled_reacceptance
     *
     * @param \DocuSign\Click\Model\ClickwrapScheduledReacceptance $scheduled_reacceptance scheduled_reacceptance
     *
     * @return $this
     */
    public function setScheduledReacceptance($scheduled_reacceptance)
    {
        $this->container['scheduled_reacceptance'] = $scheduled_reacceptance;

        return $this;
    }

    /**
     * Gets status
     *
     * @return object
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param object $status 
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets transfer_from_user_id
     *
     * @return ?string
     */
    public function getTransferFromUserId()
    {
        return $this->container['transfer_from_user_id'];
    }

    /**
     * Sets transfer_from_user_id
     *
     * @param ?string $transfer_from_user_id 
     *
     * @return $this
     */
    public function setTransferFromUserId($transfer_from_user_id)
    {
        $this->container['transfer_from_user_id'] = $transfer_from_user_id;

        return $this;
    }

    /**
     * Gets transfer_to_user_id
     *
     * @return ?string
     */
    public function getTransferToUserId()
    {
        return $this->container['transfer_to_user_id'];
    }

    /**
     * Sets transfer_to_user_id
     *
     * @param ?string $transfer_to_user_id 
     *
     * @return $this
     */
    public function setTransferToUserId($transfer_to_user_id)
    {
        $this->container['transfer_to_user_id'] = $transfer_to_user_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

