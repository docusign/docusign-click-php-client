<?php
/**
 * UserAgreementResponseStyle
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  DocuSign\Click
 * @author   Swagger Codegen team <apihelp@docusign.com>
 * @license  The DocuSign PHP Client SDK is licensed under the MIT License.
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * DocuSign Click API
 *
 * Elastic signing (also known as DocuSign Click)  lets you capture consent to standard agreement terms with a single click: terms and conditions, terms of service, terms of use, privacy policies, and more. The Click API lets you include this customizable elastic template solution in your DocuSign integrations.
 *
 * OpenAPI spec version: v1
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.21
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace DocuSign\Click\Model;

use \ArrayAccess;
use DocuSign\Click\ObjectSerializer;

/**
 * UserAgreementResponseStyle Class Doc Comment
 *
 * @category    Class
 * @description This property specifies the custom style provided when the agreement was created by [customizing the template appearance][].    [customizing the template appearance]: /docs/click-api/click101/customize-elastic-template-appearance/
 * @package     DocuSign\Click
 * @author      Swagger Codegen team <apihelp@docusign.com>
 * @license     The DocuSign PHP Client SDK is licensed under the MIT License.
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class UserAgreementResponseStyle implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'userAgreementResponse_style';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'agree_button' => '\DocuSign\Click\Model\AgreeButtonStyles',
        'agreement_statement' => '\DocuSign\Click\Model\AgreementStatementStyles',
        'container' => '\DocuSign\Click\Model\ContainerStyles',
        'disclosure_link' => '\DocuSign\Click\Model\DisclosureLinkStyles',
        'document_link' => '\DocuSign\Click\Model\DocumentLinkStyles',
        'header' => '\DocuSign\Click\Model\HeaderStyles',
        'scroll_control' => '?string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'agree_button' => null,
        'agreement_statement' => null,
        'container' => null,
        'disclosure_link' => null,
        'document_link' => null,
        'header' => null,
        'scroll_control' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'agree_button' => 'agreeButton',
        'agreement_statement' => 'agreementStatement',
        'container' => 'container',
        'disclosure_link' => 'disclosureLink',
        'document_link' => 'documentLink',
        'header' => 'header',
        'scroll_control' => 'scrollControl'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'agree_button' => 'setAgreeButton',
        'agreement_statement' => 'setAgreementStatement',
        'container' => 'setContainer',
        'disclosure_link' => 'setDisclosureLink',
        'document_link' => 'setDocumentLink',
        'header' => 'setHeader',
        'scroll_control' => 'setScrollControl'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'agree_button' => 'getAgreeButton',
        'agreement_statement' => 'getAgreementStatement',
        'container' => 'getContainer',
        'disclosure_link' => 'getDisclosureLink',
        'document_link' => 'getDocumentLink',
        'header' => 'getHeader',
        'scroll_control' => 'getScrollControl'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const SCROLL_CONTROL_BROWSER = 'browser';
    const SCROLL_CONTROL_FILL_PARENT = 'fill_parent';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getScrollControlAllowableValues()
    {
        return [
            self::SCROLL_CONTROL_BROWSER,
            self::SCROLL_CONTROL_FILL_PARENT,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['agree_button'] = isset($data['agree_button']) ? $data['agree_button'] : null;
        $this->container['agreement_statement'] = isset($data['agreement_statement']) ? $data['agreement_statement'] : null;
        $this->container['container'] = isset($data['container']) ? $data['container'] : null;
        $this->container['disclosure_link'] = isset($data['disclosure_link']) ? $data['disclosure_link'] : null;
        $this->container['document_link'] = isset($data['document_link']) ? $data['document_link'] : null;
        $this->container['header'] = isset($data['header']) ? $data['header'] : null;
        $this->container['scroll_control'] = isset($data['scroll_control']) ? $data['scroll_control'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getScrollControlAllowableValues();
        if (!is_null($this->container['scroll_control']) && !in_array($this->container['scroll_control'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'scroll_control', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets agree_button
     *
     * @return \DocuSign\Click\Model\AgreeButtonStyles
     */
    public function getAgreeButton()
    {
        return $this->container['agree_button'];
    }

    /**
     * Sets agree_button
     *
     * @param \DocuSign\Click\Model\AgreeButtonStyles $agree_button Control the display of the Agree button.
     *
     * @return $this
     */
    public function setAgreeButton($agree_button)
    {
        $this->container['agree_button'] = $agree_button;

        return $this;
    }

    /**
     * Gets agreement_statement
     *
     * @return \DocuSign\Click\Model\AgreementStatementStyles
     */
    public function getAgreementStatement()
    {
        return $this->container['agreement_statement'];
    }

    /**
     * Sets agreement_statement
     *
     * @param \DocuSign\Click\Model\AgreementStatementStyles $agreement_statement Control the display of the agreement statement.
     *
     * @return $this
     */
    public function setAgreementStatement($agreement_statement)
    {
        $this->container['agreement_statement'] = $agreement_statement;

        return $this;
    }

    /**
     * Gets container
     *
     * @return \DocuSign\Click\Model\ContainerStyles
     */
    public function getContainer()
    {
        return $this->container['container'];
    }

    /**
     * Sets container
     *
     * @param \DocuSign\Click\Model\ContainerStyles $container Control the overall clickwrap container and inherited styles such as font.
     *
     * @return $this
     */
    public function setContainer($container)
    {
        $this->container['container'] = $container;

        return $this;
    }

    /**
     * Gets disclosure_link
     *
     * @return \DocuSign\Click\Model\DisclosureLinkStyles
     */
    public function getDisclosureLink()
    {
        return $this->container['disclosure_link'];
    }

    /**
     * Sets disclosure_link
     *
     * @param \DocuSign\Click\Model\DisclosureLinkStyles $disclosure_link Control the display of the disclosure link.
     *
     * @return $this
     */
    public function setDisclosureLink($disclosure_link)
    {
        $this->container['disclosure_link'] = $disclosure_link;

        return $this;
    }

    /**
     * Gets document_link
     *
     * @return \DocuSign\Click\Model\DocumentLinkStyles
     */
    public function getDocumentLink()
    {
        return $this->container['document_link'];
    }

    /**
     * Sets document_link
     *
     * @param \DocuSign\Click\Model\DocumentLinkStyles $document_link Control the display of the agreement statement.
     *
     * @return $this
     */
    public function setDocumentLink($document_link)
    {
        $this->container['document_link'] = $document_link;

        return $this;
    }

    /**
     * Gets header
     *
     * @return \DocuSign\Click\Model\HeaderStyles
     */
    public function getHeader()
    {
        return $this->container['header'];
    }

    /**
     * Sets header
     *
     * @param \DocuSign\Click\Model\HeaderStyles $header Control the display of the header.
     *
     * @return $this
     */
    public function setHeader($header)
    {
        $this->container['header'] = $header;

        return $this;
    }

    /**
     * Gets scroll_control
     *
     * @return ?string
     */
    public function getScrollControl()
    {
        return $this->container['scroll_control'];
    }

    /**
     * Sets scroll_control
     *
     * @param ?string $scroll_control Control the scrolling of the document either by browser or by a scrollbar in the clickwrap shell. Can only be applied if the clickwrap `format` is `inline`.
     *
     * @return $this
     */
    public function setScrollControl($scroll_control)
    {
        $allowedValues = $this->getScrollControlAllowableValues();
        if (!is_null($scroll_control) && !in_array($scroll_control, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'scroll_control', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['scroll_control'] = $scroll_control;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

